/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2024 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goEtsy

import (
	"encoding/json"
	"fmt"
)

// ShopShippingProfileDestinationDestinationRegion The code of the region to which the listing ships. A region represents a set of countries. Supported regions are Europe Union and Non-Europe Union (countries in Europe not in EU). If \\`none\\`, request sets destination to destination_country_iso. Required if destination_country_iso is null or not provided.
type ShopShippingProfileDestinationDestinationRegion string

// List of ShopShippingProfileDestination_destination_region
const (
	SHOPSHIPPINGPROFILEDESTINATIONDESTINATIONREGION_EU     ShopShippingProfileDestinationDestinationRegion = "eu"
	SHOPSHIPPINGPROFILEDESTINATIONDESTINATIONREGION_NON_EU ShopShippingProfileDestinationDestinationRegion = "non_eu"
	SHOPSHIPPINGPROFILEDESTINATIONDESTINATIONREGION_NONE   ShopShippingProfileDestinationDestinationRegion = "none"
)

// All allowed values of ShopShippingProfileDestinationDestinationRegion enum
var AllowedShopShippingProfileDestinationDestinationRegionEnumValues = []ShopShippingProfileDestinationDestinationRegion{
	"eu",
	"non_eu",
	"none",
}

func (v *ShopShippingProfileDestinationDestinationRegion) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShopShippingProfileDestinationDestinationRegion(value)
	for _, existing := range AllowedShopShippingProfileDestinationDestinationRegionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShopShippingProfileDestinationDestinationRegion", value)
}

// NewShopShippingProfileDestinationDestinationRegionFromValue returns a pointer to a valid ShopShippingProfileDestinationDestinationRegion
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShopShippingProfileDestinationDestinationRegionFromValue(v string) (*ShopShippingProfileDestinationDestinationRegion, error) {
	ev := ShopShippingProfileDestinationDestinationRegion(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShopShippingProfileDestinationDestinationRegion: valid values are %v", v, AllowedShopShippingProfileDestinationDestinationRegionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShopShippingProfileDestinationDestinationRegion) IsValid() bool {
	for _, existing := range AllowedShopShippingProfileDestinationDestinationRegionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShopShippingProfileDestination_destination_region value
func (v ShopShippingProfileDestinationDestinationRegion) Ptr() *ShopShippingProfileDestinationDestinationRegion {
	return &v
}

type NullableShopShippingProfileDestinationDestinationRegion struct {
	value *ShopShippingProfileDestinationDestinationRegion
	isSet bool
}

func (v NullableShopShippingProfileDestinationDestinationRegion) Get() *ShopShippingProfileDestinationDestinationRegion {
	return v.value
}

func (v *NullableShopShippingProfileDestinationDestinationRegion) Set(val *ShopShippingProfileDestinationDestinationRegion) {
	v.value = val
	v.isSet = true
}

func (v NullableShopShippingProfileDestinationDestinationRegion) IsSet() bool {
	return v.isSet
}

func (v *NullableShopShippingProfileDestinationDestinationRegion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopShippingProfileDestinationDestinationRegion(val *ShopShippingProfileDestinationDestinationRegion) *NullableShopShippingProfileDestinationDestinationRegion {
	return &NullableShopShippingProfileDestinationDestinationRegion{value: val, isSet: true}
}

func (v NullableShopShippingProfileDestinationDestinationRegion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopShippingProfileDestinationDestinationRegion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
