/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2024 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goEtsy

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type ShopShippingProfileAPI interface {

	/*
			CreateShopShippingProfile Method for CreateShopShippingProfile

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Creates a new ShippingProfile. You can pass a country iso code or a region when creating a ShippingProfile, but not both. Only one is required. You must pass either a shipping_carrier_id AND mail_class, or both min and max_delivery_days.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@return ShopShippingProfileAPICreateShopShippingProfileRequest
	*/
	CreateShopShippingProfile(ctx context.Context, shopId int64) ShopShippingProfileAPICreateShopShippingProfileRequest

	// CreateShopShippingProfileExecute executes the request
	//  @return ShopShippingProfile
	CreateShopShippingProfileExecute(r ShopShippingProfileAPICreateShopShippingProfileRequest) (*ShopShippingProfile, *http.Response, error)

	/*
			CreateShopShippingProfileDestination Method for CreateShopShippingProfileDestination

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Creates a new shipping destination, which sets the shipping cost, carrier, and class for a destination in a [shipping profile](/documentation/reference/#tag/Shop-ShippingProfile). createShopShippingProfileDestination assigns costs using the currency of the associated shop. Set the destination using either `destination_country_iso` or `destination_region`; `destination_country_iso` and `destination_region` are mutually exclusive — set one or the other. Setting both triggers error 400. If the request sets neither `destination_country_iso` nor `destination_region`, the default destination is "everywhere". You must also either assign both a `shipping_carrier_id` AND `mail_class` or both `min_delivery_days` AND `max_delivery_days`.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
			@return ShopShippingProfileAPICreateShopShippingProfileDestinationRequest
	*/
	CreateShopShippingProfileDestination(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPICreateShopShippingProfileDestinationRequest

	// CreateShopShippingProfileDestinationExecute executes the request
	//  @return ShopShippingProfileDestination
	CreateShopShippingProfileDestinationExecute(r ShopShippingProfileAPICreateShopShippingProfileDestinationRequest) (*ShopShippingProfileDestination, *http.Response, error)

	/*
			CreateShopShippingProfileUpgrade Method for CreateShopShippingProfileUpgrade

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Creates a new shipping profile upgrade, which can establish a price for a shipping option, such as an alternate carrier or faster delivery.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
			@return ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest
	*/
	CreateShopShippingProfileUpgrade(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest

	// CreateShopShippingProfileUpgradeExecute executes the request
	//  @return ShopShippingProfileUpgrade
	CreateShopShippingProfileUpgradeExecute(r ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest) (*ShopShippingProfileUpgrade, *http.Response, error)

	/*
			DeleteShopShippingProfile Method for DeleteShopShippingProfile

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Deletes a ShippingProfile by given id.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
			@return ShopShippingProfileAPIDeleteShopShippingProfileRequest
	*/
	DeleteShopShippingProfile(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPIDeleteShopShippingProfileRequest

	// DeleteShopShippingProfileExecute executes the request
	DeleteShopShippingProfileExecute(r ShopShippingProfileAPIDeleteShopShippingProfileRequest) (*http.Response, error)

	/*
			DeleteShopShippingProfileDestination Method for DeleteShopShippingProfileDestination

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Deletes a shipping destination and removes the destination option from every listing that uses the associated shipping profile. A shipping profile requires at least one shipping destination, so this endpoint cannot delete the final shipping destination for any shipping profile. To delete the final shipping destination from a shipping profile, you must [delete the entire shipping profile](/documentation/reference/#operation/deleteShopShippingProfile).

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
			@param shippingProfileDestinationId The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing.
			@return ShopShippingProfileAPIDeleteShopShippingProfileDestinationRequest
	*/
	DeleteShopShippingProfileDestination(ctx context.Context, shopId int64, shippingProfileId int64, shippingProfileDestinationId int64) ShopShippingProfileAPIDeleteShopShippingProfileDestinationRequest

	// DeleteShopShippingProfileDestinationExecute executes the request
	DeleteShopShippingProfileDestinationExecute(r ShopShippingProfileAPIDeleteShopShippingProfileDestinationRequest) (*http.Response, error)

	/*
			DeleteShopShippingProfileUpgrade Method for DeleteShopShippingProfileUpgrade

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Deletes a shipping profile upgrade and removes the upgrade option from every listing that uses the associated shipping profile.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@param shippingProfileId The numeric ID of the shipping profile.
			@param upgradeId The numeric ID that is associated with a shipping upgrade
			@return ShopShippingProfileAPIDeleteShopShippingProfileUpgradeRequest
	*/
	DeleteShopShippingProfileUpgrade(ctx context.Context, shopId int64, shippingProfileId int64, upgradeId int64) ShopShippingProfileAPIDeleteShopShippingProfileUpgradeRequest

	// DeleteShopShippingProfileUpgradeExecute executes the request
	DeleteShopShippingProfileUpgradeExecute(r ShopShippingProfileAPIDeleteShopShippingProfileUpgradeRequest) (*http.Response, error)

	/*
			GetShippingCarriers Method for GetShippingCarriers

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Retrieves a list of available shipping carriers and the mail classes associated with them for a given country

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@return ShopShippingProfileAPIGetShippingCarriersRequest
	*/
	GetShippingCarriers(ctx context.Context) ShopShippingProfileAPIGetShippingCarriersRequest

	// GetShippingCarriersExecute executes the request
	//  @return ShippingCarriers
	GetShippingCarriersExecute(r ShopShippingProfileAPIGetShippingCarriersRequest) (*ShippingCarriers, *http.Response, error)

	/*
			GetShopShippingProfile Method for GetShopShippingProfile

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Retrieves a Shipping Profile referenced by shipping profile ID.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
			@return ShopShippingProfileAPIGetShopShippingProfileRequest
	*/
	GetShopShippingProfile(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPIGetShopShippingProfileRequest

	// GetShopShippingProfileExecute executes the request
	//  @return ShopShippingProfile
	GetShopShippingProfileExecute(r ShopShippingProfileAPIGetShopShippingProfileRequest) (*ShopShippingProfile, *http.Response, error)

	/*
			GetShopShippingProfileDestinationsByShippingProfile Method for GetShopShippingProfileDestinationsByShippingProfile

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Retrieves a list of shipping destination objects associated with a shipping profile.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
			@return ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest
	*/
	GetShopShippingProfileDestinationsByShippingProfile(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest

	// GetShopShippingProfileDestinationsByShippingProfileExecute executes the request
	//  @return ShopShippingProfileDestinations
	GetShopShippingProfileDestinationsByShippingProfileExecute(r ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest) (*ShopShippingProfileDestinations, *http.Response, error)

	/*
			GetShopShippingProfileUpgrades Method for GetShopShippingProfileUpgrades

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Retrieves the list of shipping profile upgrades assigned to a specific shipping profile.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
			@return ShopShippingProfileAPIGetShopShippingProfileUpgradesRequest
	*/
	GetShopShippingProfileUpgrades(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPIGetShopShippingProfileUpgradesRequest

	// GetShopShippingProfileUpgradesExecute executes the request
	//  @return ShopShippingProfileUpgrades
	GetShopShippingProfileUpgradesExecute(r ShopShippingProfileAPIGetShopShippingProfileUpgradesRequest) (*ShopShippingProfileUpgrades, *http.Response, error)

	/*
			GetShopShippingProfiles Method for GetShopShippingProfiles

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Retrieves a list of shipping profiles available in the specific Etsy shop identified by its shop ID.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@return ShopShippingProfileAPIGetShopShippingProfilesRequest
	*/
	GetShopShippingProfiles(ctx context.Context, shopId int64) ShopShippingProfileAPIGetShopShippingProfilesRequest

	// GetShopShippingProfilesExecute executes the request
	//  @return ShopShippingProfiles
	GetShopShippingProfilesExecute(r ShopShippingProfileAPIGetShopShippingProfilesRequest) (*ShopShippingProfiles, *http.Response, error)

	/*
			UpdateShopShippingProfile Method for UpdateShopShippingProfile

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Changes the settings in a shipping profile. You can pass a country iso code or a region when updating a ShippingProfile, but not both. Only one is required. You must pass either a shipping_carrier_id AND mail_class, or both min and max_delivery_days.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
			@return ShopShippingProfileAPIUpdateShopShippingProfileRequest
	*/
	UpdateShopShippingProfile(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPIUpdateShopShippingProfileRequest

	// UpdateShopShippingProfileExecute executes the request
	//  @return ShopShippingProfile
	UpdateShopShippingProfileExecute(r ShopShippingProfileAPIUpdateShopShippingProfileRequest) (*ShopShippingProfile, *http.Response, error)

	/*
			UpdateShopShippingProfileDestination Method for UpdateShopShippingProfileDestination

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Updates an existing shipping destination, which can set or reassign the shipping cost, carrier, and class for a destination.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
			@param shippingProfileDestinationId The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing.
			@return ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest
	*/
	UpdateShopShippingProfileDestination(ctx context.Context, shopId int64, shippingProfileId int64, shippingProfileDestinationId int64) ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest

	// UpdateShopShippingProfileDestinationExecute executes the request
	//  @return ShopShippingProfileDestination
	UpdateShopShippingProfileDestinationExecute(r ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest) (*ShopShippingProfileDestination, *http.Response, error)

	/*
			UpdateShopShippingProfileUpgrade Method for UpdateShopShippingProfileUpgrade

			<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

		Updates a shipping profile upgrade and updates any listings that use the shipping profile.

			@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
			@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
			@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
			@param upgradeId The numeric ID that is associated with a shipping upgrade
			@return ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest
	*/
	UpdateShopShippingProfileUpgrade(ctx context.Context, shopId int64, shippingProfileId int64, upgradeId int64) ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest

	// UpdateShopShippingProfileUpgradeExecute executes the request
	//  @return ShopShippingProfileUpgrade
	UpdateShopShippingProfileUpgradeExecute(r ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest) (*ShopShippingProfileUpgrade, *http.Response, error)
}

// ShopShippingProfileAPIService ShopShippingProfileAPI service
type ShopShippingProfileAPIService service

type ShopShippingProfileAPICreateShopShippingProfileRequest struct {
	ctx                   context.Context
	ApiService            ShopShippingProfileAPI
	shopId                int64
	title                 *string
	originCountryIso      *string
	primaryCost           *float32
	secondaryCost         *float32
	minProcessingTime     *int64
	maxProcessingTime     *int64
	processingTimeUnit    *CreateShopShippingProfileRequestProcessingTimeUnit
	destinationCountryIso *string
	destinationRegion     *CreateShopShippingProfileRequestDestinationRegion
	originPostalCode      *string
	shippingCarrierId     *int64
	mailClass             *string
	minDeliveryDays       *int64
	maxDeliveryDays       *int64
}

// The name string of this shipping profile.
func (r ShopShippingProfileAPICreateShopShippingProfileRequest) Title(title string) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.title = &title
	return r
}

// The ISO code of the country from which the listing ships.
func (r ShopShippingProfileAPICreateShopShippingProfileRequest) OriginCountryIso(originCountryIso string) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.originCountryIso = &originCountryIso
	return r
}

// The cost of shipping to this country/region alone, measured in the store&#39;s default currency.
func (r ShopShippingProfileAPICreateShopShippingProfileRequest) PrimaryCost(primaryCost float32) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.primaryCost = &primaryCost
	return r
}

// The cost of shipping to this country/region with another item, measured in the store&#39;s default currency.
func (r ShopShippingProfileAPICreateShopShippingProfileRequest) SecondaryCost(secondaryCost float32) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.secondaryCost = &secondaryCost
	return r
}

// The minimum time required to process to ship listings with this shipping profile.
func (r ShopShippingProfileAPICreateShopShippingProfileRequest) MinProcessingTime(minProcessingTime int64) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.minProcessingTime = &minProcessingTime
	return r
}

// The maximum processing time the listing needs to ship.
func (r ShopShippingProfileAPICreateShopShippingProfileRequest) MaxProcessingTime(maxProcessingTime int64) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.maxProcessingTime = &maxProcessingTime
	return r
}

func (r ShopShippingProfileAPICreateShopShippingProfileRequest) ProcessingTimeUnit(processingTimeUnit CreateShopShippingProfileRequestProcessingTimeUnit) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.processingTimeUnit = &processingTimeUnit
	return r
}

// The ISO code of the country to which the listing ships. If null, request sets destination to destination_region. Required if destination_region is null or not provided.
func (r ShopShippingProfileAPICreateShopShippingProfileRequest) DestinationCountryIso(destinationCountryIso string) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.destinationCountryIso = &destinationCountryIso
	return r
}

func (r ShopShippingProfileAPICreateShopShippingProfileRequest) DestinationRegion(destinationRegion CreateShopShippingProfileRequestDestinationRegion) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.destinationRegion = &destinationRegion
	return r
}

// The postal code string (not necessarily a number) for the location from which the listing ships. Required if the &#x60;origin_country_iso&#x60; supports postal codes. See the [Fulfillment Tutorial docs](https://developer.etsy.com/documentation/tutorials/fulfillment/#countries-requiring-postal-codes) for more info
func (r ShopShippingProfileAPICreateShopShippingProfileRequest) OriginPostalCode(originPostalCode string) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.originPostalCode = &originPostalCode
	return r
}

// The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. **Required with &#x60;mail_class&#x60;** if &#x60;min_delivery_days&#x60; and &#x60;max_delivery_days&#x60; are null.
func (r ShopShippingProfileAPICreateShopShippingProfileRequest) ShippingCarrierId(shippingCarrierId int64) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.shippingCarrierId = &shippingCarrierId
	return r
}

// The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. **Required with &#x60;shipping_carrier_id&#x60;** if &#x60;min_delivery_days&#x60; and &#x60;max_delivery_days&#x60; are null.
func (r ShopShippingProfileAPICreateShopShippingProfileRequest) MailClass(mailClass string) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.mailClass = &mailClass
	return r
}

// The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with &#x60;max_delivery_days&#x60;** if &#x60;mail_class&#x60; is null.
func (r ShopShippingProfileAPICreateShopShippingProfileRequest) MinDeliveryDays(minDeliveryDays int64) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.minDeliveryDays = &minDeliveryDays
	return r
}

// The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with &#x60;min_delivery_days&#x60;** if &#x60;mail_class&#x60; is null.
func (r ShopShippingProfileAPICreateShopShippingProfileRequest) MaxDeliveryDays(maxDeliveryDays int64) ShopShippingProfileAPICreateShopShippingProfileRequest {
	r.maxDeliveryDays = &maxDeliveryDays
	return r
}

func (r ShopShippingProfileAPICreateShopShippingProfileRequest) Execute() (*ShopShippingProfile, *http.Response, error) {
	return r.ApiService.CreateShopShippingProfileExecute(r)
}

/*
CreateShopShippingProfile Method for CreateShopShippingProfile

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Creates a new ShippingProfile. You can pass a country iso code or a region when creating a ShippingProfile, but not both. Only one is required. You must pass either a shipping_carrier_id AND mail_class, or both min and max_delivery_days.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@return ShopShippingProfileAPICreateShopShippingProfileRequest
*/
func (a *ShopShippingProfileAPIService) CreateShopShippingProfile(ctx context.Context, shopId int64) ShopShippingProfileAPICreateShopShippingProfileRequest {
	return ShopShippingProfileAPICreateShopShippingProfileRequest{
		ApiService: a,
		ctx:        ctx,
		shopId:     shopId,
	}
}

// Execute executes the request
//
//	@return ShopShippingProfile
func (a *ShopShippingProfileAPIService) CreateShopShippingProfileExecute(r ShopShippingProfileAPICreateShopShippingProfileRequest) (*ShopShippingProfile, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShopShippingProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.CreateShopShippingProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return localVarReturnValue, nil, reportError("shopId must be greater than 1")
	}
	if r.title == nil {
		return localVarReturnValue, nil, reportError("title is required and must be specified")
	}
	if r.originCountryIso == nil {
		return localVarReturnValue, nil, reportError("originCountryIso is required and must be specified")
	}
	if r.primaryCost == nil {
		return localVarReturnValue, nil, reportError("primaryCost is required and must be specified")
	}
	if *r.primaryCost < 0 {
		return localVarReturnValue, nil, reportError("primaryCost must be greater than 0")
	}
	if r.secondaryCost == nil {
		return localVarReturnValue, nil, reportError("secondaryCost is required and must be specified")
	}
	if *r.secondaryCost < 0 {
		return localVarReturnValue, nil, reportError("secondaryCost must be greater than 0")
	}
	if r.minProcessingTime == nil {
		return localVarReturnValue, nil, reportError("minProcessingTime is required and must be specified")
	}
	if *r.minProcessingTime < 1 {
		return localVarReturnValue, nil, reportError("minProcessingTime must be greater than 1")
	}
	if *r.minProcessingTime > 10 {
		return localVarReturnValue, nil, reportError("minProcessingTime must be less than 10")
	}
	if r.maxProcessingTime == nil {
		return localVarReturnValue, nil, reportError("maxProcessingTime is required and must be specified")
	}
	if *r.maxProcessingTime < 1 {
		return localVarReturnValue, nil, reportError("maxProcessingTime must be greater than 1")
	}
	if *r.maxProcessingTime > 10 {
		return localVarReturnValue, nil, reportError("maxProcessingTime must be less than 10")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "title", r.title, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "origin_country_iso", r.originCountryIso, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "primary_cost", r.primaryCost, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "secondary_cost", r.secondaryCost, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "min_processing_time", r.minProcessingTime, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "max_processing_time", r.maxProcessingTime, "", "")
	if r.processingTimeUnit != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "processing_time_unit", r.processingTimeUnit, "", "")
	}
	if r.destinationCountryIso != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "destination_country_iso", r.destinationCountryIso, "", "")
	}
	if r.destinationRegion != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "destination_region", r.destinationRegion, "", "")
	}
	if r.originPostalCode != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "origin_postal_code", r.originPostalCode, "", "")
	}
	if r.shippingCarrierId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "shipping_carrier_id", r.shippingCarrierId, "", "")
	}
	if r.mailClass != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "mail_class", r.mailClass, "", "")
	}
	if r.minDeliveryDays != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "min_delivery_days", r.minDeliveryDays, "", "")
	}
	if r.maxDeliveryDays != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "max_delivery_days", r.maxDeliveryDays, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShopShippingProfileAPICreateShopShippingProfileDestinationRequest struct {
	ctx                   context.Context
	ApiService            ShopShippingProfileAPI
	shopId                int64
	shippingProfileId     int64
	primaryCost           *float32
	secondaryCost         *float32
	destinationCountryIso *string
	destinationRegion     *CreateShopShippingProfileRequestDestinationRegion
	shippingCarrierId     *int64
	mailClass             *string
	minDeliveryDays       *int64
	maxDeliveryDays       *int64
}

// The cost of shipping to this country/region alone, measured in the store&#39;s default currency.
func (r ShopShippingProfileAPICreateShopShippingProfileDestinationRequest) PrimaryCost(primaryCost float32) ShopShippingProfileAPICreateShopShippingProfileDestinationRequest {
	r.primaryCost = &primaryCost
	return r
}

// The cost of shipping to this country/region with another item, measured in the store&#39;s default currency.
func (r ShopShippingProfileAPICreateShopShippingProfileDestinationRequest) SecondaryCost(secondaryCost float32) ShopShippingProfileAPICreateShopShippingProfileDestinationRequest {
	r.secondaryCost = &secondaryCost
	return r
}

// The ISO code of the country to which the listing ships. If null, request sets destination to destination_region. Required if destination_region is null or not provided.
func (r ShopShippingProfileAPICreateShopShippingProfileDestinationRequest) DestinationCountryIso(destinationCountryIso string) ShopShippingProfileAPICreateShopShippingProfileDestinationRequest {
	r.destinationCountryIso = &destinationCountryIso
	return r
}

func (r ShopShippingProfileAPICreateShopShippingProfileDestinationRequest) DestinationRegion(destinationRegion CreateShopShippingProfileRequestDestinationRegion) ShopShippingProfileAPICreateShopShippingProfileDestinationRequest {
	r.destinationRegion = &destinationRegion
	return r
}

// The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. **Required with &#x60;mail_class&#x60;** if &#x60;min_delivery_days&#x60; and &#x60;max_delivery_days&#x60; are null.
func (r ShopShippingProfileAPICreateShopShippingProfileDestinationRequest) ShippingCarrierId(shippingCarrierId int64) ShopShippingProfileAPICreateShopShippingProfileDestinationRequest {
	r.shippingCarrierId = &shippingCarrierId
	return r
}

// The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. **Required with &#x60;shipping_carrier_id&#x60;** if &#x60;min_delivery_days&#x60; and &#x60;max_delivery_days&#x60; are null.
func (r ShopShippingProfileAPICreateShopShippingProfileDestinationRequest) MailClass(mailClass string) ShopShippingProfileAPICreateShopShippingProfileDestinationRequest {
	r.mailClass = &mailClass
	return r
}

// The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with &#x60;max_delivery_days&#x60;** if &#x60;mail_class&#x60; is null.
func (r ShopShippingProfileAPICreateShopShippingProfileDestinationRequest) MinDeliveryDays(minDeliveryDays int64) ShopShippingProfileAPICreateShopShippingProfileDestinationRequest {
	r.minDeliveryDays = &minDeliveryDays
	return r
}

// The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with &#x60;min_delivery_days&#x60;** if &#x60;mail_class&#x60; is null.
func (r ShopShippingProfileAPICreateShopShippingProfileDestinationRequest) MaxDeliveryDays(maxDeliveryDays int64) ShopShippingProfileAPICreateShopShippingProfileDestinationRequest {
	r.maxDeliveryDays = &maxDeliveryDays
	return r
}

func (r ShopShippingProfileAPICreateShopShippingProfileDestinationRequest) Execute() (*ShopShippingProfileDestination, *http.Response, error) {
	return r.ApiService.CreateShopShippingProfileDestinationExecute(r)
}

/*
CreateShopShippingProfileDestination Method for CreateShopShippingProfileDestination

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Creates a new shipping destination, which sets the shipping cost, carrier, and class for a destination in a [shipping profile](/documentation/reference/#tag/Shop-ShippingProfile). createShopShippingProfileDestination assigns costs using the currency of the associated shop. Set the destination using either `destination_country_iso` or `destination_region`; `destination_country_iso` and `destination_region` are mutually exclusive — set one or the other. Setting both triggers error 400. If the request sets neither `destination_country_iso` nor `destination_region`, the default destination is "everywhere". You must also either assign both a `shipping_carrier_id` AND `mail_class` or both `min_delivery_days` AND `max_delivery_days`.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	@return ShopShippingProfileAPICreateShopShippingProfileDestinationRequest
*/
func (a *ShopShippingProfileAPIService) CreateShopShippingProfileDestination(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPICreateShopShippingProfileDestinationRequest {
	return ShopShippingProfileAPICreateShopShippingProfileDestinationRequest{
		ApiService:        a,
		ctx:               ctx,
		shopId:            shopId,
		shippingProfileId: shippingProfileId,
	}
}

// Execute executes the request
//
//	@return ShopShippingProfileDestination
func (a *ShopShippingProfileAPIService) CreateShopShippingProfileDestinationExecute(r ShopShippingProfileAPICreateShopShippingProfileDestinationRequest) (*ShopShippingProfileDestination, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShopShippingProfileDestination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.CreateShopShippingProfileDestination")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/destinations"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileId, "shippingProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return localVarReturnValue, nil, reportError("shopId must be greater than 1")
	}
	if r.shippingProfileId < 1 {
		return localVarReturnValue, nil, reportError("shippingProfileId must be greater than 1")
	}
	if r.primaryCost == nil {
		return localVarReturnValue, nil, reportError("primaryCost is required and must be specified")
	}
	if *r.primaryCost < 0 {
		return localVarReturnValue, nil, reportError("primaryCost must be greater than 0")
	}
	if r.secondaryCost == nil {
		return localVarReturnValue, nil, reportError("secondaryCost is required and must be specified")
	}
	if *r.secondaryCost < 0 {
		return localVarReturnValue, nil, reportError("secondaryCost must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "primary_cost", r.primaryCost, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "secondary_cost", r.secondaryCost, "", "")
	if r.destinationCountryIso != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "destination_country_iso", r.destinationCountryIso, "", "")
	}
	if r.destinationRegion != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "destination_region", r.destinationRegion, "", "")
	}
	if r.shippingCarrierId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "shipping_carrier_id", r.shippingCarrierId, "", "")
	}
	if r.mailClass != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "mail_class", r.mailClass, "", "")
	}
	if r.minDeliveryDays != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "min_delivery_days", r.minDeliveryDays, "", "")
	}
	if r.maxDeliveryDays != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "max_delivery_days", r.maxDeliveryDays, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest struct {
	ctx               context.Context
	ApiService        ShopShippingProfileAPI
	shopId            int64
	shippingProfileId int64
	type_             *CreateShopShippingProfileUpgradeRequestType
	upgradeName       *string
	price             *float32
	secondaryPrice    *float32
	shippingCarrierId *int64
	mailClass         *string
	minDeliveryDays   *int64
	maxDeliveryDays   *int64
}

func (r ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest) Type_(type_ CreateShopShippingProfileUpgradeRequestType) ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest {
	r.type_ = &type_
	return r
}

// Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority.
func (r ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest) UpgradeName(upgradeName string) ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest {
	r.upgradeName = &upgradeName
	return r
}

// Additional cost of adding the shipping upgrade.
func (r ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest) Price(price float32) ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest {
	r.price = &price
	return r
}

// Additional cost of adding the shipping upgrade for each additional item.
func (r ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest) SecondaryPrice(secondaryPrice float32) ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest {
	r.secondaryPrice = &secondaryPrice
	return r
}

// The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. **Required with &#x60;mail_class&#x60;** if &#x60;min_delivery_days&#x60; and &#x60;max_delivery_days&#x60; are null.
func (r ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest) ShippingCarrierId(shippingCarrierId int64) ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest {
	r.shippingCarrierId = &shippingCarrierId
	return r
}

// The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. **Required with &#x60;shipping_carrier_id&#x60;** if &#x60;min_delivery_days&#x60; and &#x60;max_delivery_days&#x60; are null.
func (r ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest) MailClass(mailClass string) ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest {
	r.mailClass = &mailClass
	return r
}

// The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with &#x60;max_delivery_days&#x60;** if &#x60;mail_class&#x60; is null.
func (r ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest) MinDeliveryDays(minDeliveryDays int64) ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest {
	r.minDeliveryDays = &minDeliveryDays
	return r
}

// The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with &#x60;min_delivery_days&#x60;** if &#x60;mail_class&#x60; is null.
func (r ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest) MaxDeliveryDays(maxDeliveryDays int64) ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest {
	r.maxDeliveryDays = &maxDeliveryDays
	return r
}

func (r ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest) Execute() (*ShopShippingProfileUpgrade, *http.Response, error) {
	return r.ApiService.CreateShopShippingProfileUpgradeExecute(r)
}

/*
CreateShopShippingProfileUpgrade Method for CreateShopShippingProfileUpgrade

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Creates a new shipping profile upgrade, which can establish a price for a shipping option, such as an alternate carrier or faster delivery.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	@return ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest
*/
func (a *ShopShippingProfileAPIService) CreateShopShippingProfileUpgrade(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest {
	return ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest{
		ApiService:        a,
		ctx:               ctx,
		shopId:            shopId,
		shippingProfileId: shippingProfileId,
	}
}

// Execute executes the request
//
//	@return ShopShippingProfileUpgrade
func (a *ShopShippingProfileAPIService) CreateShopShippingProfileUpgradeExecute(r ShopShippingProfileAPICreateShopShippingProfileUpgradeRequest) (*ShopShippingProfileUpgrade, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShopShippingProfileUpgrade
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.CreateShopShippingProfileUpgrade")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/upgrades"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileId, "shippingProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return localVarReturnValue, nil, reportError("shopId must be greater than 1")
	}
	if r.shippingProfileId < 1 {
		return localVarReturnValue, nil, reportError("shippingProfileId must be greater than 1")
	}
	if r.type_ == nil {
		return localVarReturnValue, nil, reportError("type_ is required and must be specified")
	}
	if r.upgradeName == nil {
		return localVarReturnValue, nil, reportError("upgradeName is required and must be specified")
	}
	if r.price == nil {
		return localVarReturnValue, nil, reportError("price is required and must be specified")
	}
	if *r.price < 0 {
		return localVarReturnValue, nil, reportError("price must be greater than 0")
	}
	if r.secondaryPrice == nil {
		return localVarReturnValue, nil, reportError("secondaryPrice is required and must be specified")
	}
	if *r.secondaryPrice < 0 {
		return localVarReturnValue, nil, reportError("secondaryPrice must be greater than 0")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "upgrade_name", r.upgradeName, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "price", r.price, "", "")
	parameterAddToHeaderOrQuery(localVarFormParams, "secondary_price", r.secondaryPrice, "", "")
	if r.shippingCarrierId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "shipping_carrier_id", r.shippingCarrierId, "", "")
	}
	if r.mailClass != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "mail_class", r.mailClass, "", "")
	}
	if r.minDeliveryDays != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "min_delivery_days", r.minDeliveryDays, "", "")
	}
	if r.maxDeliveryDays != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "max_delivery_days", r.maxDeliveryDays, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShopShippingProfileAPIDeleteShopShippingProfileRequest struct {
	ctx               context.Context
	ApiService        ShopShippingProfileAPI
	shopId            int64
	shippingProfileId int64
}

func (r ShopShippingProfileAPIDeleteShopShippingProfileRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteShopShippingProfileExecute(r)
}

/*
DeleteShopShippingProfile Method for DeleteShopShippingProfile

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Deletes a ShippingProfile by given id.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	@return ShopShippingProfileAPIDeleteShopShippingProfileRequest
*/
func (a *ShopShippingProfileAPIService) DeleteShopShippingProfile(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPIDeleteShopShippingProfileRequest {
	return ShopShippingProfileAPIDeleteShopShippingProfileRequest{
		ApiService:        a,
		ctx:               ctx,
		shopId:            shopId,
		shippingProfileId: shippingProfileId,
	}
}

// Execute executes the request
func (a *ShopShippingProfileAPIService) DeleteShopShippingProfileExecute(r ShopShippingProfileAPIDeleteShopShippingProfileRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.DeleteShopShippingProfile")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileId, "shippingProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return nil, reportError("shopId must be greater than 1")
	}
	if r.shippingProfileId < 1 {
		return nil, reportError("shippingProfileId must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ShopShippingProfileAPIDeleteShopShippingProfileDestinationRequest struct {
	ctx                          context.Context
	ApiService                   ShopShippingProfileAPI
	shopId                       int64
	shippingProfileId            int64
	shippingProfileDestinationId int64
}

func (r ShopShippingProfileAPIDeleteShopShippingProfileDestinationRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteShopShippingProfileDestinationExecute(r)
}

/*
DeleteShopShippingProfileDestination Method for DeleteShopShippingProfileDestination

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Deletes a shipping destination and removes the destination option from every listing that uses the associated shipping profile. A shipping profile requires at least one shipping destination, so this endpoint cannot delete the final shipping destination for any shipping profile. To delete the final shipping destination from a shipping profile, you must [delete the entire shipping profile](/documentation/reference/#operation/deleteShopShippingProfile).

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	@param shippingProfileDestinationId The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing.
	@return ShopShippingProfileAPIDeleteShopShippingProfileDestinationRequest
*/
func (a *ShopShippingProfileAPIService) DeleteShopShippingProfileDestination(ctx context.Context, shopId int64, shippingProfileId int64, shippingProfileDestinationId int64) ShopShippingProfileAPIDeleteShopShippingProfileDestinationRequest {
	return ShopShippingProfileAPIDeleteShopShippingProfileDestinationRequest{
		ApiService:                   a,
		ctx:                          ctx,
		shopId:                       shopId,
		shippingProfileId:            shippingProfileId,
		shippingProfileDestinationId: shippingProfileDestinationId,
	}
}

// Execute executes the request
func (a *ShopShippingProfileAPIService) DeleteShopShippingProfileDestinationExecute(r ShopShippingProfileAPIDeleteShopShippingProfileDestinationRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.DeleteShopShippingProfileDestination")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/destinations/{shipping_profile_destination_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileId, "shippingProfileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_destination_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileDestinationId, "shippingProfileDestinationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return nil, reportError("shopId must be greater than 1")
	}
	if r.shippingProfileId < 1 {
		return nil, reportError("shippingProfileId must be greater than 1")
	}
	if r.shippingProfileDestinationId < 1 {
		return nil, reportError("shippingProfileDestinationId must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ShopShippingProfileAPIDeleteShopShippingProfileUpgradeRequest struct {
	ctx               context.Context
	ApiService        ShopShippingProfileAPI
	shopId            int64
	shippingProfileId int64
	upgradeId         int64
}

func (r ShopShippingProfileAPIDeleteShopShippingProfileUpgradeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteShopShippingProfileUpgradeExecute(r)
}

/*
DeleteShopShippingProfileUpgrade Method for DeleteShopShippingProfileUpgrade

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Deletes a shipping profile upgrade and removes the upgrade option from every listing that uses the associated shipping profile.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@param shippingProfileId The numeric ID of the shipping profile.
	@param upgradeId The numeric ID that is associated with a shipping upgrade
	@return ShopShippingProfileAPIDeleteShopShippingProfileUpgradeRequest
*/
func (a *ShopShippingProfileAPIService) DeleteShopShippingProfileUpgrade(ctx context.Context, shopId int64, shippingProfileId int64, upgradeId int64) ShopShippingProfileAPIDeleteShopShippingProfileUpgradeRequest {
	return ShopShippingProfileAPIDeleteShopShippingProfileUpgradeRequest{
		ApiService:        a,
		ctx:               ctx,
		shopId:            shopId,
		shippingProfileId: shippingProfileId,
		upgradeId:         upgradeId,
	}
}

// Execute executes the request
func (a *ShopShippingProfileAPIService) DeleteShopShippingProfileUpgradeExecute(r ShopShippingProfileAPIDeleteShopShippingProfileUpgradeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.DeleteShopShippingProfileUpgrade")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/upgrades/{upgrade_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileId, "shippingProfileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"upgrade_id"+"}", url.PathEscape(parameterValueToString(r.upgradeId, "upgradeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return nil, reportError("shopId must be greater than 1")
	}
	if r.shippingProfileId < 1 {
		return nil, reportError("shippingProfileId must be greater than 1")
	}
	if r.upgradeId < 1 {
		return nil, reportError("upgradeId must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ShopShippingProfileAPIGetShippingCarriersRequest struct {
	ctx              context.Context
	ApiService       ShopShippingProfileAPI
	originCountryIso *string
}

// The ISO code of the country from which the listing ships.
func (r ShopShippingProfileAPIGetShippingCarriersRequest) OriginCountryIso(originCountryIso string) ShopShippingProfileAPIGetShippingCarriersRequest {
	r.originCountryIso = &originCountryIso
	return r
}

func (r ShopShippingProfileAPIGetShippingCarriersRequest) Execute() (*ShippingCarriers, *http.Response, error) {
	return r.ApiService.GetShippingCarriersExecute(r)
}

/*
GetShippingCarriers Method for GetShippingCarriers

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Retrieves a list of available shipping carriers and the mail classes associated with them for a given country

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ShopShippingProfileAPIGetShippingCarriersRequest
*/
func (a *ShopShippingProfileAPIService) GetShippingCarriers(ctx context.Context) ShopShippingProfileAPIGetShippingCarriersRequest {
	return ShopShippingProfileAPIGetShippingCarriersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ShippingCarriers
func (a *ShopShippingProfileAPIService) GetShippingCarriersExecute(r ShopShippingProfileAPIGetShippingCarriersRequest) (*ShippingCarriers, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShippingCarriers
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.GetShippingCarriers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shipping-carriers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.originCountryIso == nil {
		return localVarReturnValue, nil, reportError("originCountryIso is required and must be specified")
	}

	parameterAddToHeaderOrQuery(localVarQueryParams, "origin_country_iso", r.originCountryIso, "form", "")
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShopShippingProfileAPIGetShopShippingProfileRequest struct {
	ctx               context.Context
	ApiService        ShopShippingProfileAPI
	shopId            int64
	shippingProfileId int64
}

func (r ShopShippingProfileAPIGetShopShippingProfileRequest) Execute() (*ShopShippingProfile, *http.Response, error) {
	return r.ApiService.GetShopShippingProfileExecute(r)
}

/*
GetShopShippingProfile Method for GetShopShippingProfile

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Retrieves a Shipping Profile referenced by shipping profile ID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	@return ShopShippingProfileAPIGetShopShippingProfileRequest
*/
func (a *ShopShippingProfileAPIService) GetShopShippingProfile(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPIGetShopShippingProfileRequest {
	return ShopShippingProfileAPIGetShopShippingProfileRequest{
		ApiService:        a,
		ctx:               ctx,
		shopId:            shopId,
		shippingProfileId: shippingProfileId,
	}
}

// Execute executes the request
//
//	@return ShopShippingProfile
func (a *ShopShippingProfileAPIService) GetShopShippingProfileExecute(r ShopShippingProfileAPIGetShopShippingProfileRequest) (*ShopShippingProfile, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShopShippingProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.GetShopShippingProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileId, "shippingProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return localVarReturnValue, nil, reportError("shopId must be greater than 1")
	}
	if r.shippingProfileId < 1 {
		return localVarReturnValue, nil, reportError("shippingProfileId must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest struct {
	ctx               context.Context
	ApiService        ShopShippingProfileAPI
	shopId            int64
	shippingProfileId int64
	limit             *int64
	offset            *int64
}

// The maximum number of results to return.
func (r ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest) Limit(limit int64) ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest {
	r.limit = &limit
	return r
}

// The number of records to skip before selecting the first result.
func (r ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest) Offset(offset int64) ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest {
	r.offset = &offset
	return r
}

func (r ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest) Execute() (*ShopShippingProfileDestinations, *http.Response, error) {
	return r.ApiService.GetShopShippingProfileDestinationsByShippingProfileExecute(r)
}

/*
GetShopShippingProfileDestinationsByShippingProfile Method for GetShopShippingProfileDestinationsByShippingProfile

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Retrieves a list of shipping destination objects associated with a shipping profile.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	@return ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest
*/
func (a *ShopShippingProfileAPIService) GetShopShippingProfileDestinationsByShippingProfile(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest {
	return ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest{
		ApiService:        a,
		ctx:               ctx,
		shopId:            shopId,
		shippingProfileId: shippingProfileId,
	}
}

// Execute executes the request
//
//	@return ShopShippingProfileDestinations
func (a *ShopShippingProfileAPIService) GetShopShippingProfileDestinationsByShippingProfileExecute(r ShopShippingProfileAPIGetShopShippingProfileDestinationsByShippingProfileRequest) (*ShopShippingProfileDestinations, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShopShippingProfileDestinations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.GetShopShippingProfileDestinationsByShippingProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/destinations"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileId, "shippingProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return localVarReturnValue, nil, reportError("shopId must be greater than 1")
	}
	if r.shippingProfileId < 1 {
		return localVarReturnValue, nil, reportError("shippingProfileId must be greater than 1")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	} else {
		var defaultValue int64 = 25
		r.limit = &defaultValue
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	} else {
		var defaultValue int64 = 0
		r.offset = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShopShippingProfileAPIGetShopShippingProfileUpgradesRequest struct {
	ctx               context.Context
	ApiService        ShopShippingProfileAPI
	shopId            int64
	shippingProfileId int64
}

func (r ShopShippingProfileAPIGetShopShippingProfileUpgradesRequest) Execute() (*ShopShippingProfileUpgrades, *http.Response, error) {
	return r.ApiService.GetShopShippingProfileUpgradesExecute(r)
}

/*
GetShopShippingProfileUpgrades Method for GetShopShippingProfileUpgrades

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Retrieves the list of shipping profile upgrades assigned to a specific shipping profile.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	@return ShopShippingProfileAPIGetShopShippingProfileUpgradesRequest
*/
func (a *ShopShippingProfileAPIService) GetShopShippingProfileUpgrades(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPIGetShopShippingProfileUpgradesRequest {
	return ShopShippingProfileAPIGetShopShippingProfileUpgradesRequest{
		ApiService:        a,
		ctx:               ctx,
		shopId:            shopId,
		shippingProfileId: shippingProfileId,
	}
}

// Execute executes the request
//
//	@return ShopShippingProfileUpgrades
func (a *ShopShippingProfileAPIService) GetShopShippingProfileUpgradesExecute(r ShopShippingProfileAPIGetShopShippingProfileUpgradesRequest) (*ShopShippingProfileUpgrades, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShopShippingProfileUpgrades
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.GetShopShippingProfileUpgrades")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/upgrades"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileId, "shippingProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return localVarReturnValue, nil, reportError("shopId must be greater than 1")
	}
	if r.shippingProfileId < 1 {
		return localVarReturnValue, nil, reportError("shippingProfileId must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShopShippingProfileAPIGetShopShippingProfilesRequest struct {
	ctx        context.Context
	ApiService ShopShippingProfileAPI
	shopId     int64
}

func (r ShopShippingProfileAPIGetShopShippingProfilesRequest) Execute() (*ShopShippingProfiles, *http.Response, error) {
	return r.ApiService.GetShopShippingProfilesExecute(r)
}

/*
GetShopShippingProfiles Method for GetShopShippingProfiles

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Retrieves a list of shipping profiles available in the specific Etsy shop identified by its shop ID.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@return ShopShippingProfileAPIGetShopShippingProfilesRequest
*/
func (a *ShopShippingProfileAPIService) GetShopShippingProfiles(ctx context.Context, shopId int64) ShopShippingProfileAPIGetShopShippingProfilesRequest {
	return ShopShippingProfileAPIGetShopShippingProfilesRequest{
		ApiService: a,
		ctx:        ctx,
		shopId:     shopId,
	}
}

// Execute executes the request
//
//	@return ShopShippingProfiles
func (a *ShopShippingProfileAPIService) GetShopShippingProfilesExecute(r ShopShippingProfileAPIGetShopShippingProfilesRequest) (*ShopShippingProfiles, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShopShippingProfiles
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.GetShopShippingProfiles")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return localVarReturnValue, nil, reportError("shopId must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShopShippingProfileAPIUpdateShopShippingProfileRequest struct {
	ctx                context.Context
	ApiService         ShopShippingProfileAPI
	shopId             int64
	shippingProfileId  int64
	title              *string
	originCountryIso   *string
	minProcessingTime  *int64
	maxProcessingTime  *int64
	processingTimeUnit *CreateShopShippingProfileRequestProcessingTimeUnit
	originPostalCode   *string
}

// The name string of this shipping profile.
func (r ShopShippingProfileAPIUpdateShopShippingProfileRequest) Title(title string) ShopShippingProfileAPIUpdateShopShippingProfileRequest {
	r.title = &title
	return r
}

// The ISO code of the country from which the listing ships.
func (r ShopShippingProfileAPIUpdateShopShippingProfileRequest) OriginCountryIso(originCountryIso string) ShopShippingProfileAPIUpdateShopShippingProfileRequest {
	r.originCountryIso = &originCountryIso
	return r
}

// The minimum time required to process to ship listings with this shipping profile.
func (r ShopShippingProfileAPIUpdateShopShippingProfileRequest) MinProcessingTime(minProcessingTime int64) ShopShippingProfileAPIUpdateShopShippingProfileRequest {
	r.minProcessingTime = &minProcessingTime
	return r
}

// The maximum processing time the listing needs to ship.
func (r ShopShippingProfileAPIUpdateShopShippingProfileRequest) MaxProcessingTime(maxProcessingTime int64) ShopShippingProfileAPIUpdateShopShippingProfileRequest {
	r.maxProcessingTime = &maxProcessingTime
	return r
}

func (r ShopShippingProfileAPIUpdateShopShippingProfileRequest) ProcessingTimeUnit(processingTimeUnit CreateShopShippingProfileRequestProcessingTimeUnit) ShopShippingProfileAPIUpdateShopShippingProfileRequest {
	r.processingTimeUnit = &processingTimeUnit
	return r
}

// The postal code string (not necessarily a number) for the location from which the listing ships. Required if the &#x60;origin_country_iso&#x60; supports postal codes. See the [Fulfillment Tutorial docs](https://developer.etsy.com/documentation/tutorials/fulfillment/#countries-requiring-postal-codes) for more info
func (r ShopShippingProfileAPIUpdateShopShippingProfileRequest) OriginPostalCode(originPostalCode string) ShopShippingProfileAPIUpdateShopShippingProfileRequest {
	r.originPostalCode = &originPostalCode
	return r
}

func (r ShopShippingProfileAPIUpdateShopShippingProfileRequest) Execute() (*ShopShippingProfile, *http.Response, error) {
	return r.ApiService.UpdateShopShippingProfileExecute(r)
}

/*
UpdateShopShippingProfile Method for UpdateShopShippingProfile

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Changes the settings in a shipping profile. You can pass a country iso code or a region when updating a ShippingProfile, but not both. Only one is required. You must pass either a shipping_carrier_id AND mail_class, or both min and max_delivery_days.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	@return ShopShippingProfileAPIUpdateShopShippingProfileRequest
*/
func (a *ShopShippingProfileAPIService) UpdateShopShippingProfile(ctx context.Context, shopId int64, shippingProfileId int64) ShopShippingProfileAPIUpdateShopShippingProfileRequest {
	return ShopShippingProfileAPIUpdateShopShippingProfileRequest{
		ApiService:        a,
		ctx:               ctx,
		shopId:            shopId,
		shippingProfileId: shippingProfileId,
	}
}

// Execute executes the request
//
//	@return ShopShippingProfile
func (a *ShopShippingProfileAPIService) UpdateShopShippingProfileExecute(r ShopShippingProfileAPIUpdateShopShippingProfileRequest) (*ShopShippingProfile, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShopShippingProfile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.UpdateShopShippingProfile")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileId, "shippingProfileId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return localVarReturnValue, nil, reportError("shopId must be greater than 1")
	}
	if r.shippingProfileId < 1 {
		return localVarReturnValue, nil, reportError("shippingProfileId must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.title != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "title", r.title, "", "")
	}
	if r.originCountryIso != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "origin_country_iso", r.originCountryIso, "", "")
	}
	if r.minProcessingTime != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "min_processing_time", r.minProcessingTime, "", "")
	}
	if r.maxProcessingTime != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "max_processing_time", r.maxProcessingTime, "", "")
	}
	if r.processingTimeUnit != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "processing_time_unit", r.processingTimeUnit, "", "")
	}
	if r.originPostalCode != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "origin_postal_code", r.originPostalCode, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest struct {
	ctx                          context.Context
	ApiService                   ShopShippingProfileAPI
	shopId                       int64
	shippingProfileId            int64
	shippingProfileDestinationId int64
	primaryCost                  *float32
	secondaryCost                *float32
	destinationCountryIso        *string
	destinationRegion            *CreateShopShippingProfileRequestDestinationRegion
	shippingCarrierId            *int64
	mailClass                    *string
	minDeliveryDays              *int64
	maxDeliveryDays              *int64
}

// The cost of shipping to this country/region alone, measured in the store&#39;s default currency.
func (r ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest) PrimaryCost(primaryCost float32) ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest {
	r.primaryCost = &primaryCost
	return r
}

// The cost of shipping to this country/region with another item, measured in the store&#39;s default currency.
func (r ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest) SecondaryCost(secondaryCost float32) ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest {
	r.secondaryCost = &secondaryCost
	return r
}

// The ISO code of the country to which the listing ships. If null, request sets destination to destination_region. Required if destination_region is null or not provided.
func (r ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest) DestinationCountryIso(destinationCountryIso string) ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest {
	r.destinationCountryIso = &destinationCountryIso
	return r
}

func (r ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest) DestinationRegion(destinationRegion CreateShopShippingProfileRequestDestinationRegion) ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest {
	r.destinationRegion = &destinationRegion
	return r
}

// The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. **Required with &#x60;mail_class&#x60;** if &#x60;min_delivery_days&#x60; and &#x60;max_delivery_days&#x60; are null.
func (r ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest) ShippingCarrierId(shippingCarrierId int64) ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest {
	r.shippingCarrierId = &shippingCarrierId
	return r
}

// The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. **Required with &#x60;shipping_carrier_id&#x60;** if &#x60;min_delivery_days&#x60; and &#x60;max_delivery_days&#x60; are null.
func (r ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest) MailClass(mailClass string) ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest {
	r.mailClass = &mailClass
	return r
}

// The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with &#x60;max_delivery_days&#x60;** if &#x60;mail_class&#x60; is null.
func (r ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest) MinDeliveryDays(minDeliveryDays int64) ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest {
	r.minDeliveryDays = &minDeliveryDays
	return r
}

// The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with &#x60;min_delivery_days&#x60;** if &#x60;mail_class&#x60; is null.
func (r ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest) MaxDeliveryDays(maxDeliveryDays int64) ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest {
	r.maxDeliveryDays = &maxDeliveryDays
	return r
}

func (r ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest) Execute() (*ShopShippingProfileDestination, *http.Response, error) {
	return r.ApiService.UpdateShopShippingProfileDestinationExecute(r)
}

/*
UpdateShopShippingProfileDestination Method for UpdateShopShippingProfileDestination

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Updates an existing shipping destination, which can set or reassign the shipping cost, carrier, and class for a destination.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	@param shippingProfileDestinationId The numeric ID of the shipping profile destination in the [shipping profile](/documentation/reference#tag/Shop-ShippingProfile) associated with the listing.
	@return ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest
*/
func (a *ShopShippingProfileAPIService) UpdateShopShippingProfileDestination(ctx context.Context, shopId int64, shippingProfileId int64, shippingProfileDestinationId int64) ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest {
	return ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest{
		ApiService:                   a,
		ctx:                          ctx,
		shopId:                       shopId,
		shippingProfileId:            shippingProfileId,
		shippingProfileDestinationId: shippingProfileDestinationId,
	}
}

// Execute executes the request
//
//	@return ShopShippingProfileDestination
func (a *ShopShippingProfileAPIService) UpdateShopShippingProfileDestinationExecute(r ShopShippingProfileAPIUpdateShopShippingProfileDestinationRequest) (*ShopShippingProfileDestination, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShopShippingProfileDestination
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.UpdateShopShippingProfileDestination")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/destinations/{shipping_profile_destination_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileId, "shippingProfileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_destination_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileDestinationId, "shippingProfileDestinationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return localVarReturnValue, nil, reportError("shopId must be greater than 1")
	}
	if r.shippingProfileId < 1 {
		return localVarReturnValue, nil, reportError("shippingProfileId must be greater than 1")
	}
	if r.shippingProfileDestinationId < 1 {
		return localVarReturnValue, nil, reportError("shippingProfileDestinationId must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.primaryCost != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "primary_cost", r.primaryCost, "", "")
	}
	if r.secondaryCost != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "secondary_cost", r.secondaryCost, "", "")
	}
	if r.destinationCountryIso != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "destination_country_iso", r.destinationCountryIso, "", "")
	}
	if r.destinationRegion != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "destination_region", r.destinationRegion, "", "")
	}
	if r.shippingCarrierId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "shipping_carrier_id", r.shippingCarrierId, "", "")
	}
	if r.mailClass != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "mail_class", r.mailClass, "", "")
	}
	if r.minDeliveryDays != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "min_delivery_days", r.minDeliveryDays, "", "")
	}
	if r.maxDeliveryDays != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "max_delivery_days", r.maxDeliveryDays, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest struct {
	ctx               context.Context
	ApiService        ShopShippingProfileAPI
	shopId            int64
	shippingProfileId int64
	upgradeId         int64
	upgradeName       *string
	type_             *CreateShopShippingProfileUpgradeRequestType
	price             *float32
	secondaryPrice    *float32
	shippingCarrierId *int64
	mailClass         *string
	minDeliveryDays   *int64
	maxDeliveryDays   *int64
}

// Name for the shipping upgrade shown to shoppers at checkout, e.g. USPS Priority.
func (r ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest) UpgradeName(upgradeName string) ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest {
	r.upgradeName = &upgradeName
	return r
}

func (r ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest) Type_(type_ CreateShopShippingProfileUpgradeRequestType) ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest {
	r.type_ = &type_
	return r
}

// Additional cost of adding the shipping upgrade.
func (r ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest) Price(price float32) ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest {
	r.price = &price
	return r
}

// Additional cost of adding the shipping upgrade for each additional item.
func (r ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest) SecondaryPrice(secondaryPrice float32) ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest {
	r.secondaryPrice = &secondaryPrice
	return r
}

// The unique ID of a supported shipping carrier, which is used to calculate an Estimated Delivery Date. **Required with &#x60;mail_class&#x60;** if &#x60;min_delivery_days&#x60; and &#x60;max_delivery_days&#x60; are null.
func (r ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest) ShippingCarrierId(shippingCarrierId int64) ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest {
	r.shippingCarrierId = &shippingCarrierId
	return r
}

// The unique ID string of a shipping carrier&#39;s mail class, which is used to calculate an estimated delivery date. **Required with &#x60;shipping_carrier_id&#x60;** if &#x60;min_delivery_days&#x60; and &#x60;max_delivery_days&#x60; are null.
func (r ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest) MailClass(mailClass string) ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest {
	r.mailClass = &mailClass
	return r
}

// The minimum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with &#x60;max_delivery_days&#x60;** if &#x60;mail_class&#x60; is null.
func (r ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest) MinDeliveryDays(minDeliveryDays int64) ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest {
	r.minDeliveryDays = &minDeliveryDays
	return r
}

// The maximum number of business days a buyer can expect to wait to receive their purchased item once it has shipped. **Required with &#x60;min_delivery_days&#x60;** if &#x60;mail_class&#x60; is null.
func (r ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest) MaxDeliveryDays(maxDeliveryDays int64) ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest {
	r.maxDeliveryDays = &maxDeliveryDays
	return r
}

func (r ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest) Execute() (*ShopShippingProfileUpgrade, *http.Response, error) {
	return r.ApiService.UpdateShopShippingProfileUpgradeExecute(r)
}

/*
UpdateShopShippingProfileUpgrade Method for UpdateShopShippingProfileUpgrade

<div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><span class="wt-badge wt-badge--notificationPrimary wt-bg-slime-tint wt-mr-xs-2">General Release</span><a class="wt-text-link" href="https://github.com/etsy/open-api/discussions" target="_blank" rel="noopener noreferrer">Report bug</a></div><div class="wt-display-flex-xs wt-align-items-center wt-mt-xs-2 wt-mb-xs-3"><p class="wt-text-body-01 banner-text">This endpoint is ready for production use.</p></div>

Updates a shipping profile upgrade and updates any listings that use the shipping profile.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param shopId The unique positive non-zero numeric ID for an Etsy Shop.
	@param shippingProfileId The numeric ID of the [shipping profile](/documentation/reference#operation/getShopShippingProfile) associated with the listing. Required when listing type is `physical`.
	@param upgradeId The numeric ID that is associated with a shipping upgrade
	@return ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest
*/
func (a *ShopShippingProfileAPIService) UpdateShopShippingProfileUpgrade(ctx context.Context, shopId int64, shippingProfileId int64, upgradeId int64) ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest {
	return ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest{
		ApiService:        a,
		ctx:               ctx,
		shopId:            shopId,
		shippingProfileId: shippingProfileId,
		upgradeId:         upgradeId,
	}
}

// Execute executes the request
//
//	@return ShopShippingProfileUpgrade
func (a *ShopShippingProfileAPIService) UpdateShopShippingProfileUpgradeExecute(r ShopShippingProfileAPIUpdateShopShippingProfileUpgradeRequest) (*ShopShippingProfileUpgrade, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ShopShippingProfileUpgrade
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShopShippingProfileAPIService.UpdateShopShippingProfileUpgrade")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v3/application/shops/{shop_id}/shipping-profiles/{shipping_profile_id}/upgrades/{upgrade_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"shop_id"+"}", url.PathEscape(parameterValueToString(r.shopId, "shopId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"shipping_profile_id"+"}", url.PathEscape(parameterValueToString(r.shippingProfileId, "shippingProfileId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"upgrade_id"+"}", url.PathEscape(parameterValueToString(r.upgradeId, "upgradeId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.shopId < 1 {
		return localVarReturnValue, nil, reportError("shopId must be greater than 1")
	}
	if r.shippingProfileId < 1 {
		return localVarReturnValue, nil, reportError("shippingProfileId must be greater than 1")
	}
	if r.upgradeId < 1 {
		return localVarReturnValue, nil, reportError("upgradeId must be greater than 1")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/x-www-form-urlencoded"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.upgradeName != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "upgrade_name", r.upgradeName, "", "")
	}
	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "type", r.type_, "", "")
	}
	if r.price != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "price", r.price, "", "")
	}
	if r.secondaryPrice != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "secondary_price", r.secondaryPrice, "", "")
	}
	if r.shippingCarrierId != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "shipping_carrier_id", r.shippingCarrierId, "", "")
	}
	if r.mailClass != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "mail_class", r.mailClass, "", "")
	}
	if r.minDeliveryDays != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "min_delivery_days", r.minDeliveryDays, "", "")
	}
	if r.maxDeliveryDays != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "max_delivery_days", r.maxDeliveryDays, "", "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["x-api-key"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["x-api-key"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 503 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorSchema
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
