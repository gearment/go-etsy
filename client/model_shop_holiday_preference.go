/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2024 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goEtsy

import (
	"encoding/json"
)

// checks if the ShopHolidayPreference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ShopHolidayPreference{}

// ShopHolidayPreference Represents a shop's holiday preference
type ShopHolidayPreference struct {
	// The unique positive non-zero numeric ID for an Etsy Shop.
	ShopId    *int64                                      `json:"shop_id,omitempty"`
	HolidayId *UpdateHolidayPreferencesHolidayIdParameter `json:"holiday_id,omitempty"`
	// The country iso where the shop is located.
	CountryIso *string `json:"country_iso,omitempty"`
	// A boolean value for whether the shop will process orders on a particular holiday.
	IsWorking *bool `json:"is_working,omitempty"`
	// The name of the holiday that a country observes.
	HolidayName          *string `json:"holiday_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ShopHolidayPreference ShopHolidayPreference

// NewShopHolidayPreference instantiates a new ShopHolidayPreference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShopHolidayPreference() *ShopHolidayPreference {
	this := ShopHolidayPreference{}
	return &this
}

// NewShopHolidayPreferenceWithDefaults instantiates a new ShopHolidayPreference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShopHolidayPreferenceWithDefaults() *ShopHolidayPreference {
	this := ShopHolidayPreference{}
	return &this
}

// GetShopId returns the ShopId field value if set, zero value otherwise.
func (o *ShopHolidayPreference) GetShopId() int64 {
	if o == nil || IsNil(o.ShopId) {
		var ret int64
		return ret
	}
	return *o.ShopId
}

// GetShopIdOk returns a tuple with the ShopId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopHolidayPreference) GetShopIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ShopId) {
		return nil, false
	}
	return o.ShopId, true
}

// HasShopId returns a boolean if a field has been set.
func (o *ShopHolidayPreference) HasShopId() bool {
	if o != nil && !IsNil(o.ShopId) {
		return true
	}

	return false
}

// SetShopId gets a reference to the given int64 and assigns it to the ShopId field.
func (o *ShopHolidayPreference) SetShopId(v int64) {
	o.ShopId = &v
}

// GetHolidayId returns the HolidayId field value if set, zero value otherwise.
func (o *ShopHolidayPreference) GetHolidayId() UpdateHolidayPreferencesHolidayIdParameter {
	if o == nil || IsNil(o.HolidayId) {
		var ret UpdateHolidayPreferencesHolidayIdParameter
		return ret
	}
	return *o.HolidayId
}

// GetHolidayIdOk returns a tuple with the HolidayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopHolidayPreference) GetHolidayIdOk() (*UpdateHolidayPreferencesHolidayIdParameter, bool) {
	if o == nil || IsNil(o.HolidayId) {
		return nil, false
	}
	return o.HolidayId, true
}

// HasHolidayId returns a boolean if a field has been set.
func (o *ShopHolidayPreference) HasHolidayId() bool {
	if o != nil && !IsNil(o.HolidayId) {
		return true
	}

	return false
}

// SetHolidayId gets a reference to the given UpdateHolidayPreferencesHolidayIdParameter and assigns it to the HolidayId field.
func (o *ShopHolidayPreference) SetHolidayId(v UpdateHolidayPreferencesHolidayIdParameter) {
	o.HolidayId = &v
}

// GetCountryIso returns the CountryIso field value if set, zero value otherwise.
func (o *ShopHolidayPreference) GetCountryIso() string {
	if o == nil || IsNil(o.CountryIso) {
		var ret string
		return ret
	}
	return *o.CountryIso
}

// GetCountryIsoOk returns a tuple with the CountryIso field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopHolidayPreference) GetCountryIsoOk() (*string, bool) {
	if o == nil || IsNil(o.CountryIso) {
		return nil, false
	}
	return o.CountryIso, true
}

// HasCountryIso returns a boolean if a field has been set.
func (o *ShopHolidayPreference) HasCountryIso() bool {
	if o != nil && !IsNil(o.CountryIso) {
		return true
	}

	return false
}

// SetCountryIso gets a reference to the given string and assigns it to the CountryIso field.
func (o *ShopHolidayPreference) SetCountryIso(v string) {
	o.CountryIso = &v
}

// GetIsWorking returns the IsWorking field value if set, zero value otherwise.
func (o *ShopHolidayPreference) GetIsWorking() bool {
	if o == nil || IsNil(o.IsWorking) {
		var ret bool
		return ret
	}
	return *o.IsWorking
}

// GetIsWorkingOk returns a tuple with the IsWorking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopHolidayPreference) GetIsWorkingOk() (*bool, bool) {
	if o == nil || IsNil(o.IsWorking) {
		return nil, false
	}
	return o.IsWorking, true
}

// HasIsWorking returns a boolean if a field has been set.
func (o *ShopHolidayPreference) HasIsWorking() bool {
	if o != nil && !IsNil(o.IsWorking) {
		return true
	}

	return false
}

// SetIsWorking gets a reference to the given bool and assigns it to the IsWorking field.
func (o *ShopHolidayPreference) SetIsWorking(v bool) {
	o.IsWorking = &v
}

// GetHolidayName returns the HolidayName field value if set, zero value otherwise.
func (o *ShopHolidayPreference) GetHolidayName() string {
	if o == nil || IsNil(o.HolidayName) {
		var ret string
		return ret
	}
	return *o.HolidayName
}

// GetHolidayNameOk returns a tuple with the HolidayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ShopHolidayPreference) GetHolidayNameOk() (*string, bool) {
	if o == nil || IsNil(o.HolidayName) {
		return nil, false
	}
	return o.HolidayName, true
}

// HasHolidayName returns a boolean if a field has been set.
func (o *ShopHolidayPreference) HasHolidayName() bool {
	if o != nil && !IsNil(o.HolidayName) {
		return true
	}

	return false
}

// SetHolidayName gets a reference to the given string and assigns it to the HolidayName field.
func (o *ShopHolidayPreference) SetHolidayName(v string) {
	o.HolidayName = &v
}

func (o ShopHolidayPreference) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ShopHolidayPreference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ShopId) {
		toSerialize["shop_id"] = o.ShopId
	}
	if !IsNil(o.HolidayId) {
		toSerialize["holiday_id"] = o.HolidayId
	}
	if !IsNil(o.CountryIso) {
		toSerialize["country_iso"] = o.CountryIso
	}
	if !IsNil(o.IsWorking) {
		toSerialize["is_working"] = o.IsWorking
	}
	if !IsNil(o.HolidayName) {
		toSerialize["holiday_name"] = o.HolidayName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

type NullableShopHolidayPreference struct {
	value *ShopHolidayPreference
	isSet bool
}

func (v NullableShopHolidayPreference) Get() *ShopHolidayPreference {
	return v.value
}

func (v *NullableShopHolidayPreference) Set(val *ShopHolidayPreference) {
	v.value = val
	v.isSet = true
}

func (v NullableShopHolidayPreference) IsSet() bool {
	return v.isSet
}

func (v *NullableShopHolidayPreference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopHolidayPreference(val *ShopHolidayPreference) *NullableShopHolidayPreference {
	return &NullableShopHolidayPreference{value: val, isSet: true}
}

func (v NullableShopHolidayPreference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopHolidayPreference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
