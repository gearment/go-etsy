/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2024 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goEtsy

import (
	"encoding/json"
)

// checks if the ListingInventoryProduct type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListingInventoryProduct{}

// ListingInventoryProduct A representation of a product for a listing.
type ListingInventoryProduct struct {
	// The numeric ID for a specific [product](/documentation/reference#tag/ShopListing-Product) purchased from a listing.
	ProductId *int64 `json:"product_id,omitempty"`
	// The SKU string for the product
	Sku *string `json:"sku,omitempty"`
	// When true, someone deleted this product.
	IsDeleted *bool `json:"is_deleted,omitempty"`
	// A list of product offering entries for this product.
	Offerings []ListingInventoryProductOffering `json:"offerings,omitempty"`
	// A list of property value entries for this product. Note: parenthesis characters (`(` and `)`) are not allowed.
	PropertyValues       []ListingPropertyValue `json:"property_values,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ListingInventoryProduct ListingInventoryProduct

// NewListingInventoryProduct instantiates a new ListingInventoryProduct object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListingInventoryProduct() *ListingInventoryProduct {
	this := ListingInventoryProduct{}
	return &this
}

// NewListingInventoryProductWithDefaults instantiates a new ListingInventoryProduct object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListingInventoryProductWithDefaults() *ListingInventoryProduct {
	this := ListingInventoryProduct{}
	return &this
}

// GetProductId returns the ProductId field value if set, zero value otherwise.
func (o *ListingInventoryProduct) GetProductId() int64 {
	if o == nil || IsNil(o.ProductId) {
		var ret int64
		return ret
	}
	return *o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingInventoryProduct) GetProductIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ProductId) {
		return nil, false
	}
	return o.ProductId, true
}

// HasProductId returns a boolean if a field has been set.
func (o *ListingInventoryProduct) HasProductId() bool {
	if o != nil && !IsNil(o.ProductId) {
		return true
	}

	return false
}

// SetProductId gets a reference to the given int64 and assigns it to the ProductId field.
func (o *ListingInventoryProduct) SetProductId(v int64) {
	o.ProductId = &v
}

// GetSku returns the Sku field value if set, zero value otherwise.
func (o *ListingInventoryProduct) GetSku() string {
	if o == nil || IsNil(o.Sku) {
		var ret string
		return ret
	}
	return *o.Sku
}

// GetSkuOk returns a tuple with the Sku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingInventoryProduct) GetSkuOk() (*string, bool) {
	if o == nil || IsNil(o.Sku) {
		return nil, false
	}
	return o.Sku, true
}

// HasSku returns a boolean if a field has been set.
func (o *ListingInventoryProduct) HasSku() bool {
	if o != nil && !IsNil(o.Sku) {
		return true
	}

	return false
}

// SetSku gets a reference to the given string and assigns it to the Sku field.
func (o *ListingInventoryProduct) SetSku(v string) {
	o.Sku = &v
}

// GetIsDeleted returns the IsDeleted field value if set, zero value otherwise.
func (o *ListingInventoryProduct) GetIsDeleted() bool {
	if o == nil || IsNil(o.IsDeleted) {
		var ret bool
		return ret
	}
	return *o.IsDeleted
}

// GetIsDeletedOk returns a tuple with the IsDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingInventoryProduct) GetIsDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDeleted) {
		return nil, false
	}
	return o.IsDeleted, true
}

// HasIsDeleted returns a boolean if a field has been set.
func (o *ListingInventoryProduct) HasIsDeleted() bool {
	if o != nil && !IsNil(o.IsDeleted) {
		return true
	}

	return false
}

// SetIsDeleted gets a reference to the given bool and assigns it to the IsDeleted field.
func (o *ListingInventoryProduct) SetIsDeleted(v bool) {
	o.IsDeleted = &v
}

// GetOfferings returns the Offerings field value if set, zero value otherwise.
func (o *ListingInventoryProduct) GetOfferings() []ListingInventoryProductOffering {
	if o == nil || IsNil(o.Offerings) {
		var ret []ListingInventoryProductOffering
		return ret
	}
	return o.Offerings
}

// GetOfferingsOk returns a tuple with the Offerings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingInventoryProduct) GetOfferingsOk() ([]ListingInventoryProductOffering, bool) {
	if o == nil || IsNil(o.Offerings) {
		return nil, false
	}
	return o.Offerings, true
}

// HasOfferings returns a boolean if a field has been set.
func (o *ListingInventoryProduct) HasOfferings() bool {
	if o != nil && !IsNil(o.Offerings) {
		return true
	}

	return false
}

// SetOfferings gets a reference to the given []ListingInventoryProductOffering and assigns it to the Offerings field.
func (o *ListingInventoryProduct) SetOfferings(v []ListingInventoryProductOffering) {
	o.Offerings = v
}

// GetPropertyValues returns the PropertyValues field value if set, zero value otherwise.
func (o *ListingInventoryProduct) GetPropertyValues() []ListingPropertyValue {
	if o == nil || IsNil(o.PropertyValues) {
		var ret []ListingPropertyValue
		return ret
	}
	return o.PropertyValues
}

// GetPropertyValuesOk returns a tuple with the PropertyValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListingInventoryProduct) GetPropertyValuesOk() ([]ListingPropertyValue, bool) {
	if o == nil || IsNil(o.PropertyValues) {
		return nil, false
	}
	return o.PropertyValues, true
}

// HasPropertyValues returns a boolean if a field has been set.
func (o *ListingInventoryProduct) HasPropertyValues() bool {
	if o != nil && !IsNil(o.PropertyValues) {
		return true
	}

	return false
}

// SetPropertyValues gets a reference to the given []ListingPropertyValue and assigns it to the PropertyValues field.
func (o *ListingInventoryProduct) SetPropertyValues(v []ListingPropertyValue) {
	o.PropertyValues = v
}

func (o ListingInventoryProduct) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListingInventoryProduct) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductId) {
		toSerialize["product_id"] = o.ProductId
	}
	if !IsNil(o.Sku) {
		toSerialize["sku"] = o.Sku
	}
	if !IsNil(o.IsDeleted) {
		toSerialize["is_deleted"] = o.IsDeleted
	}
	if !IsNil(o.Offerings) {
		toSerialize["offerings"] = o.Offerings
	}
	if !IsNil(o.PropertyValues) {
		toSerialize["property_values"] = o.PropertyValues
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

type NullableListingInventoryProduct struct {
	value *ListingInventoryProduct
	isSet bool
}

func (v NullableListingInventoryProduct) Get() *ListingInventoryProduct {
	return v.value
}

func (v *NullableListingInventoryProduct) Set(val *ListingInventoryProduct) {
	v.value = val
	v.isSet = true
}

func (v NullableListingInventoryProduct) IsSet() bool {
	return v.isSet
}

func (v *NullableListingInventoryProduct) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListingInventoryProduct(val *ListingInventoryProduct) *NullableListingInventoryProduct {
	return &NullableListingInventoryProduct{value: val, isSet: true}
}

func (v NullableListingInventoryProduct) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListingInventoryProduct) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
