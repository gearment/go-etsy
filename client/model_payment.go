/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2024 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goEtsy

import (
	"encoding/json"
)

// checks if the Payment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Payment{}

// Payment Represents a payment made with Etsy Payments. All monetary amounts are in USD pennies unless otherwise specified.
type Payment struct {
	// A unique numeric ID for a payment to a specific Etsy [shop](/documentation/reference#tag/Shop).
	PaymentId *int64 `json:"payment_id,omitempty"`
	// The numeric ID for the [user](/documentation/reference#tag/User) who paid the purchase.
	BuyerUserId *int64 `json:"buyer_user_id,omitempty"`
	// The unique positive non-zero numeric ID for an Etsy Shop.
	ShopId *int64 `json:"shop_id,omitempty"`
	// The numeric ID for the [receipt](/documentation/reference#tag/Shop-Receipt) associated to this transaction.
	ReceiptId *int64 `json:"receipt_id,omitempty"`
	// An integer equal to gross amount of the order, in pennies, including shipping and taxes.
	AmountGross *Money `json:"amount_gross,omitempty"`
	// An integer equal to the original card processing fee of the order in pennies.
	AmountFees *Money `json:"amount_fees,omitempty"`
	// An integer equal to the payment value, in pennies, less fees (`amount_gross` - `amount_fees`).
	AmountNet *Money `json:"amount_net,omitempty"`
	// The total gross value of the payment posted once the purchase ships. This is equal to the `amount_gross` UNLESS the seller issues a refund prior to shipping. We consider \"shipping\" to be the event which \"posts\" to the ledger. Therefore, if the seller refunds first, we reduce the `amount_gross` first and post then that amount. The seller never sees the refunded amount in their ledger. This is equal to the \"Credit\" amount in the ledger entry.
	PostedGross NullableMoney `json:"posted_gross,omitempty"`
	// The total value of the fees posted once the purchase ships. Etsy refunds a proportional amount of the fees when a seller refunds a buyer. When the seller issues a refund prior to shipping, the posted amount is less then the original.
	PostedFees NullableMoney `json:"posted_fees,omitempty"`
	// The total value of the payment at the time of posting, less fees. (`posted_gross` - `posted_fees`)
	PostedNet NullableMoney `json:"posted_net,omitempty"`
	// The gross payment amount after the seller refunds a payment, partially or fully.
	AdjustedGross NullableMoney `json:"adjusted_gross,omitempty"`
	// The new fee amount after a seller refunds a payment, partially or fully.
	AdjustedFees NullableMoney `json:"adjusted_fees,omitempty"`
	// The total value of the payment after refunds, less fees (`adjusted_gross` - `adjusted_fees`).
	AdjustedNet NullableMoney `json:"adjusted_net,omitempty"`
	// The ISO (alphabetic) code string for the payment's currency.
	Currency *string `json:"currency,omitempty"`
	// The ISO (alphabetic) code for the shop's currency. The shop displays all prices in this currency by default.
	ShopCurrency NullableString `json:"shop_currency,omitempty"`
	// The currency string of the buyer.
	BuyerCurrency NullableString `json:"buyer_currency,omitempty"`
	// The numeric ID of the user to which the seller ships the order.
	ShippingUserId NullableInt64 `json:"shipping_user_id,omitempty"`
	// The numeric id identifying the shipping address.
	ShippingAddressId *int64 `json:"shipping_address_id,omitempty"`
	// The numeric ID identifying the billing address of the buyer.
	BillingAddressId *int64 `json:"billing_address_id,omitempty"`
	// A string indicating the current status of the payment, most commonly \"settled\" or \"authed\".
	Status *string `json:"status,omitempty"`
	// The transaction\\'s shipping date and time, in epoch seconds.
	ShippedTimestamp NullableInt64 `json:"shipped_timestamp,omitempty"`
	// The transaction\\'s creation date and time, in epoch seconds.
	CreateTimestamp *int64 `json:"create_timestamp,omitempty"`
	// The transaction\\'s creation date and time, in epoch seconds.
	CreatedTimestamp *int64 `json:"created_timestamp,omitempty"`
	// The date and time of the last change to the payment adjustment in epoch seconds.
	UpdateTimestamp *int64 `json:"update_timestamp,omitempty"`
	// The date and time of the last change to the payment adjustment in epoch seconds.
	UpdatedTimestamp *int64 `json:"updated_timestamp,omitempty"`
	// List of refund objects on an Etsy Payments transaction. All monetary amounts are in USD pennies unless otherwise specified.
	PaymentAdjustments   []PaymentAdjustment `json:"payment_adjustments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Payment Payment

// NewPayment instantiates a new Payment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayment() *Payment {
	this := Payment{}
	return &this
}

// NewPaymentWithDefaults instantiates a new Payment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaymentWithDefaults() *Payment {
	this := Payment{}
	return &this
}

// GetPaymentId returns the PaymentId field value if set, zero value otherwise.
func (o *Payment) GetPaymentId() int64 {
	if o == nil || IsNil(o.PaymentId) {
		var ret int64
		return ret
	}
	return *o.PaymentId
}

// GetPaymentIdOk returns a tuple with the PaymentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetPaymentIdOk() (*int64, bool) {
	if o == nil || IsNil(o.PaymentId) {
		return nil, false
	}
	return o.PaymentId, true
}

// HasPaymentId returns a boolean if a field has been set.
func (o *Payment) HasPaymentId() bool {
	if o != nil && !IsNil(o.PaymentId) {
		return true
	}

	return false
}

// SetPaymentId gets a reference to the given int64 and assigns it to the PaymentId field.
func (o *Payment) SetPaymentId(v int64) {
	o.PaymentId = &v
}

// GetBuyerUserId returns the BuyerUserId field value if set, zero value otherwise.
func (o *Payment) GetBuyerUserId() int64 {
	if o == nil || IsNil(o.BuyerUserId) {
		var ret int64
		return ret
	}
	return *o.BuyerUserId
}

// GetBuyerUserIdOk returns a tuple with the BuyerUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetBuyerUserIdOk() (*int64, bool) {
	if o == nil || IsNil(o.BuyerUserId) {
		return nil, false
	}
	return o.BuyerUserId, true
}

// HasBuyerUserId returns a boolean if a field has been set.
func (o *Payment) HasBuyerUserId() bool {
	if o != nil && !IsNil(o.BuyerUserId) {
		return true
	}

	return false
}

// SetBuyerUserId gets a reference to the given int64 and assigns it to the BuyerUserId field.
func (o *Payment) SetBuyerUserId(v int64) {
	o.BuyerUserId = &v
}

// GetShopId returns the ShopId field value if set, zero value otherwise.
func (o *Payment) GetShopId() int64 {
	if o == nil || IsNil(o.ShopId) {
		var ret int64
		return ret
	}
	return *o.ShopId
}

// GetShopIdOk returns a tuple with the ShopId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetShopIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ShopId) {
		return nil, false
	}
	return o.ShopId, true
}

// HasShopId returns a boolean if a field has been set.
func (o *Payment) HasShopId() bool {
	if o != nil && !IsNil(o.ShopId) {
		return true
	}

	return false
}

// SetShopId gets a reference to the given int64 and assigns it to the ShopId field.
func (o *Payment) SetShopId(v int64) {
	o.ShopId = &v
}

// GetReceiptId returns the ReceiptId field value if set, zero value otherwise.
func (o *Payment) GetReceiptId() int64 {
	if o == nil || IsNil(o.ReceiptId) {
		var ret int64
		return ret
	}
	return *o.ReceiptId
}

// GetReceiptIdOk returns a tuple with the ReceiptId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetReceiptIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ReceiptId) {
		return nil, false
	}
	return o.ReceiptId, true
}

// HasReceiptId returns a boolean if a field has been set.
func (o *Payment) HasReceiptId() bool {
	if o != nil && !IsNil(o.ReceiptId) {
		return true
	}

	return false
}

// SetReceiptId gets a reference to the given int64 and assigns it to the ReceiptId field.
func (o *Payment) SetReceiptId(v int64) {
	o.ReceiptId = &v
}

// GetAmountGross returns the AmountGross field value if set, zero value otherwise.
func (o *Payment) GetAmountGross() Money {
	if o == nil || IsNil(o.AmountGross) {
		var ret Money
		return ret
	}
	return *o.AmountGross
}

// GetAmountGrossOk returns a tuple with the AmountGross field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetAmountGrossOk() (*Money, bool) {
	if o == nil || IsNil(o.AmountGross) {
		return nil, false
	}
	return o.AmountGross, true
}

// HasAmountGross returns a boolean if a field has been set.
func (o *Payment) HasAmountGross() bool {
	if o != nil && !IsNil(o.AmountGross) {
		return true
	}

	return false
}

// SetAmountGross gets a reference to the given Money and assigns it to the AmountGross field.
func (o *Payment) SetAmountGross(v Money) {
	o.AmountGross = &v
}

// GetAmountFees returns the AmountFees field value if set, zero value otherwise.
func (o *Payment) GetAmountFees() Money {
	if o == nil || IsNil(o.AmountFees) {
		var ret Money
		return ret
	}
	return *o.AmountFees
}

// GetAmountFeesOk returns a tuple with the AmountFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetAmountFeesOk() (*Money, bool) {
	if o == nil || IsNil(o.AmountFees) {
		return nil, false
	}
	return o.AmountFees, true
}

// HasAmountFees returns a boolean if a field has been set.
func (o *Payment) HasAmountFees() bool {
	if o != nil && !IsNil(o.AmountFees) {
		return true
	}

	return false
}

// SetAmountFees gets a reference to the given Money and assigns it to the AmountFees field.
func (o *Payment) SetAmountFees(v Money) {
	o.AmountFees = &v
}

// GetAmountNet returns the AmountNet field value if set, zero value otherwise.
func (o *Payment) GetAmountNet() Money {
	if o == nil || IsNil(o.AmountNet) {
		var ret Money
		return ret
	}
	return *o.AmountNet
}

// GetAmountNetOk returns a tuple with the AmountNet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetAmountNetOk() (*Money, bool) {
	if o == nil || IsNil(o.AmountNet) {
		return nil, false
	}
	return o.AmountNet, true
}

// HasAmountNet returns a boolean if a field has been set.
func (o *Payment) HasAmountNet() bool {
	if o != nil && !IsNil(o.AmountNet) {
		return true
	}

	return false
}

// SetAmountNet gets a reference to the given Money and assigns it to the AmountNet field.
func (o *Payment) SetAmountNet(v Money) {
	o.AmountNet = &v
}

// GetPostedGross returns the PostedGross field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payment) GetPostedGross() Money {
	if o == nil || IsNil(o.PostedGross.Get()) {
		var ret Money
		return ret
	}
	return *o.PostedGross.Get()
}

// GetPostedGrossOk returns a tuple with the PostedGross field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payment) GetPostedGrossOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostedGross.Get(), o.PostedGross.IsSet()
}

// HasPostedGross returns a boolean if a field has been set.
func (o *Payment) HasPostedGross() bool {
	if o != nil && o.PostedGross.IsSet() {
		return true
	}

	return false
}

// SetPostedGross gets a reference to the given NullableMoney and assigns it to the PostedGross field.
func (o *Payment) SetPostedGross(v Money) {
	o.PostedGross.Set(&v)
}

// SetPostedGrossNil sets the value for PostedGross to be an explicit nil
func (o *Payment) SetPostedGrossNil() {
	o.PostedGross.Set(nil)
}

// UnsetPostedGross ensures that no value is present for PostedGross, not even an explicit nil
func (o *Payment) UnsetPostedGross() {
	o.PostedGross.Unset()
}

// GetPostedFees returns the PostedFees field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payment) GetPostedFees() Money {
	if o == nil || IsNil(o.PostedFees.Get()) {
		var ret Money
		return ret
	}
	return *o.PostedFees.Get()
}

// GetPostedFeesOk returns a tuple with the PostedFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payment) GetPostedFeesOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostedFees.Get(), o.PostedFees.IsSet()
}

// HasPostedFees returns a boolean if a field has been set.
func (o *Payment) HasPostedFees() bool {
	if o != nil && o.PostedFees.IsSet() {
		return true
	}

	return false
}

// SetPostedFees gets a reference to the given NullableMoney and assigns it to the PostedFees field.
func (o *Payment) SetPostedFees(v Money) {
	o.PostedFees.Set(&v)
}

// SetPostedFeesNil sets the value for PostedFees to be an explicit nil
func (o *Payment) SetPostedFeesNil() {
	o.PostedFees.Set(nil)
}

// UnsetPostedFees ensures that no value is present for PostedFees, not even an explicit nil
func (o *Payment) UnsetPostedFees() {
	o.PostedFees.Unset()
}

// GetPostedNet returns the PostedNet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payment) GetPostedNet() Money {
	if o == nil || IsNil(o.PostedNet.Get()) {
		var ret Money
		return ret
	}
	return *o.PostedNet.Get()
}

// GetPostedNetOk returns a tuple with the PostedNet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payment) GetPostedNetOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return o.PostedNet.Get(), o.PostedNet.IsSet()
}

// HasPostedNet returns a boolean if a field has been set.
func (o *Payment) HasPostedNet() bool {
	if o != nil && o.PostedNet.IsSet() {
		return true
	}

	return false
}

// SetPostedNet gets a reference to the given NullableMoney and assigns it to the PostedNet field.
func (o *Payment) SetPostedNet(v Money) {
	o.PostedNet.Set(&v)
}

// SetPostedNetNil sets the value for PostedNet to be an explicit nil
func (o *Payment) SetPostedNetNil() {
	o.PostedNet.Set(nil)
}

// UnsetPostedNet ensures that no value is present for PostedNet, not even an explicit nil
func (o *Payment) UnsetPostedNet() {
	o.PostedNet.Unset()
}

// GetAdjustedGross returns the AdjustedGross field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payment) GetAdjustedGross() Money {
	if o == nil || IsNil(o.AdjustedGross.Get()) {
		var ret Money
		return ret
	}
	return *o.AdjustedGross.Get()
}

// GetAdjustedGrossOk returns a tuple with the AdjustedGross field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payment) GetAdjustedGrossOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdjustedGross.Get(), o.AdjustedGross.IsSet()
}

// HasAdjustedGross returns a boolean if a field has been set.
func (o *Payment) HasAdjustedGross() bool {
	if o != nil && o.AdjustedGross.IsSet() {
		return true
	}

	return false
}

// SetAdjustedGross gets a reference to the given NullableMoney and assigns it to the AdjustedGross field.
func (o *Payment) SetAdjustedGross(v Money) {
	o.AdjustedGross.Set(&v)
}

// SetAdjustedGrossNil sets the value for AdjustedGross to be an explicit nil
func (o *Payment) SetAdjustedGrossNil() {
	o.AdjustedGross.Set(nil)
}

// UnsetAdjustedGross ensures that no value is present for AdjustedGross, not even an explicit nil
func (o *Payment) UnsetAdjustedGross() {
	o.AdjustedGross.Unset()
}

// GetAdjustedFees returns the AdjustedFees field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payment) GetAdjustedFees() Money {
	if o == nil || IsNil(o.AdjustedFees.Get()) {
		var ret Money
		return ret
	}
	return *o.AdjustedFees.Get()
}

// GetAdjustedFeesOk returns a tuple with the AdjustedFees field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payment) GetAdjustedFeesOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdjustedFees.Get(), o.AdjustedFees.IsSet()
}

// HasAdjustedFees returns a boolean if a field has been set.
func (o *Payment) HasAdjustedFees() bool {
	if o != nil && o.AdjustedFees.IsSet() {
		return true
	}

	return false
}

// SetAdjustedFees gets a reference to the given NullableMoney and assigns it to the AdjustedFees field.
func (o *Payment) SetAdjustedFees(v Money) {
	o.AdjustedFees.Set(&v)
}

// SetAdjustedFeesNil sets the value for AdjustedFees to be an explicit nil
func (o *Payment) SetAdjustedFeesNil() {
	o.AdjustedFees.Set(nil)
}

// UnsetAdjustedFees ensures that no value is present for AdjustedFees, not even an explicit nil
func (o *Payment) UnsetAdjustedFees() {
	o.AdjustedFees.Unset()
}

// GetAdjustedNet returns the AdjustedNet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payment) GetAdjustedNet() Money {
	if o == nil || IsNil(o.AdjustedNet.Get()) {
		var ret Money
		return ret
	}
	return *o.AdjustedNet.Get()
}

// GetAdjustedNetOk returns a tuple with the AdjustedNet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payment) GetAdjustedNetOk() (*Money, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdjustedNet.Get(), o.AdjustedNet.IsSet()
}

// HasAdjustedNet returns a boolean if a field has been set.
func (o *Payment) HasAdjustedNet() bool {
	if o != nil && o.AdjustedNet.IsSet() {
		return true
	}

	return false
}

// SetAdjustedNet gets a reference to the given NullableMoney and assigns it to the AdjustedNet field.
func (o *Payment) SetAdjustedNet(v Money) {
	o.AdjustedNet.Set(&v)
}

// SetAdjustedNetNil sets the value for AdjustedNet to be an explicit nil
func (o *Payment) SetAdjustedNetNil() {
	o.AdjustedNet.Set(nil)
}

// UnsetAdjustedNet ensures that no value is present for AdjustedNet, not even an explicit nil
func (o *Payment) UnsetAdjustedNet() {
	o.AdjustedNet.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Payment) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Payment) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *Payment) SetCurrency(v string) {
	o.Currency = &v
}

// GetShopCurrency returns the ShopCurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payment) GetShopCurrency() string {
	if o == nil || IsNil(o.ShopCurrency.Get()) {
		var ret string
		return ret
	}
	return *o.ShopCurrency.Get()
}

// GetShopCurrencyOk returns a tuple with the ShopCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payment) GetShopCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShopCurrency.Get(), o.ShopCurrency.IsSet()
}

// HasShopCurrency returns a boolean if a field has been set.
func (o *Payment) HasShopCurrency() bool {
	if o != nil && o.ShopCurrency.IsSet() {
		return true
	}

	return false
}

// SetShopCurrency gets a reference to the given NullableString and assigns it to the ShopCurrency field.
func (o *Payment) SetShopCurrency(v string) {
	o.ShopCurrency.Set(&v)
}

// SetShopCurrencyNil sets the value for ShopCurrency to be an explicit nil
func (o *Payment) SetShopCurrencyNil() {
	o.ShopCurrency.Set(nil)
}

// UnsetShopCurrency ensures that no value is present for ShopCurrency, not even an explicit nil
func (o *Payment) UnsetShopCurrency() {
	o.ShopCurrency.Unset()
}

// GetBuyerCurrency returns the BuyerCurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payment) GetBuyerCurrency() string {
	if o == nil || IsNil(o.BuyerCurrency.Get()) {
		var ret string
		return ret
	}
	return *o.BuyerCurrency.Get()
}

// GetBuyerCurrencyOk returns a tuple with the BuyerCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payment) GetBuyerCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuyerCurrency.Get(), o.BuyerCurrency.IsSet()
}

// HasBuyerCurrency returns a boolean if a field has been set.
func (o *Payment) HasBuyerCurrency() bool {
	if o != nil && o.BuyerCurrency.IsSet() {
		return true
	}

	return false
}

// SetBuyerCurrency gets a reference to the given NullableString and assigns it to the BuyerCurrency field.
func (o *Payment) SetBuyerCurrency(v string) {
	o.BuyerCurrency.Set(&v)
}

// SetBuyerCurrencyNil sets the value for BuyerCurrency to be an explicit nil
func (o *Payment) SetBuyerCurrencyNil() {
	o.BuyerCurrency.Set(nil)
}

// UnsetBuyerCurrency ensures that no value is present for BuyerCurrency, not even an explicit nil
func (o *Payment) UnsetBuyerCurrency() {
	o.BuyerCurrency.Unset()
}

// GetShippingUserId returns the ShippingUserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payment) GetShippingUserId() int64 {
	if o == nil || IsNil(o.ShippingUserId.Get()) {
		var ret int64
		return ret
	}
	return *o.ShippingUserId.Get()
}

// GetShippingUserIdOk returns a tuple with the ShippingUserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payment) GetShippingUserIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShippingUserId.Get(), o.ShippingUserId.IsSet()
}

// HasShippingUserId returns a boolean if a field has been set.
func (o *Payment) HasShippingUserId() bool {
	if o != nil && o.ShippingUserId.IsSet() {
		return true
	}

	return false
}

// SetShippingUserId gets a reference to the given NullableInt64 and assigns it to the ShippingUserId field.
func (o *Payment) SetShippingUserId(v int64) {
	o.ShippingUserId.Set(&v)
}

// SetShippingUserIdNil sets the value for ShippingUserId to be an explicit nil
func (o *Payment) SetShippingUserIdNil() {
	o.ShippingUserId.Set(nil)
}

// UnsetShippingUserId ensures that no value is present for ShippingUserId, not even an explicit nil
func (o *Payment) UnsetShippingUserId() {
	o.ShippingUserId.Unset()
}

// GetShippingAddressId returns the ShippingAddressId field value if set, zero value otherwise.
func (o *Payment) GetShippingAddressId() int64 {
	if o == nil || IsNil(o.ShippingAddressId) {
		var ret int64
		return ret
	}
	return *o.ShippingAddressId
}

// GetShippingAddressIdOk returns a tuple with the ShippingAddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetShippingAddressIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ShippingAddressId) {
		return nil, false
	}
	return o.ShippingAddressId, true
}

// HasShippingAddressId returns a boolean if a field has been set.
func (o *Payment) HasShippingAddressId() bool {
	if o != nil && !IsNil(o.ShippingAddressId) {
		return true
	}

	return false
}

// SetShippingAddressId gets a reference to the given int64 and assigns it to the ShippingAddressId field.
func (o *Payment) SetShippingAddressId(v int64) {
	o.ShippingAddressId = &v
}

// GetBillingAddressId returns the BillingAddressId field value if set, zero value otherwise.
func (o *Payment) GetBillingAddressId() int64 {
	if o == nil || IsNil(o.BillingAddressId) {
		var ret int64
		return ret
	}
	return *o.BillingAddressId
}

// GetBillingAddressIdOk returns a tuple with the BillingAddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetBillingAddressIdOk() (*int64, bool) {
	if o == nil || IsNil(o.BillingAddressId) {
		return nil, false
	}
	return o.BillingAddressId, true
}

// HasBillingAddressId returns a boolean if a field has been set.
func (o *Payment) HasBillingAddressId() bool {
	if o != nil && !IsNil(o.BillingAddressId) {
		return true
	}

	return false
}

// SetBillingAddressId gets a reference to the given int64 and assigns it to the BillingAddressId field.
func (o *Payment) SetBillingAddressId(v int64) {
	o.BillingAddressId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Payment) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Payment) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Payment) SetStatus(v string) {
	o.Status = &v
}

// GetShippedTimestamp returns the ShippedTimestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Payment) GetShippedTimestamp() int64 {
	if o == nil || IsNil(o.ShippedTimestamp.Get()) {
		var ret int64
		return ret
	}
	return *o.ShippedTimestamp.Get()
}

// GetShippedTimestampOk returns a tuple with the ShippedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Payment) GetShippedTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShippedTimestamp.Get(), o.ShippedTimestamp.IsSet()
}

// HasShippedTimestamp returns a boolean if a field has been set.
func (o *Payment) HasShippedTimestamp() bool {
	if o != nil && o.ShippedTimestamp.IsSet() {
		return true
	}

	return false
}

// SetShippedTimestamp gets a reference to the given NullableInt64 and assigns it to the ShippedTimestamp field.
func (o *Payment) SetShippedTimestamp(v int64) {
	o.ShippedTimestamp.Set(&v)
}

// SetShippedTimestampNil sets the value for ShippedTimestamp to be an explicit nil
func (o *Payment) SetShippedTimestampNil() {
	o.ShippedTimestamp.Set(nil)
}

// UnsetShippedTimestamp ensures that no value is present for ShippedTimestamp, not even an explicit nil
func (o *Payment) UnsetShippedTimestamp() {
	o.ShippedTimestamp.Unset()
}

// GetCreateTimestamp returns the CreateTimestamp field value if set, zero value otherwise.
func (o *Payment) GetCreateTimestamp() int64 {
	if o == nil || IsNil(o.CreateTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreateTimestamp
}

// GetCreateTimestampOk returns a tuple with the CreateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCreateTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreateTimestamp) {
		return nil, false
	}
	return o.CreateTimestamp, true
}

// HasCreateTimestamp returns a boolean if a field has been set.
func (o *Payment) HasCreateTimestamp() bool {
	if o != nil && !IsNil(o.CreateTimestamp) {
		return true
	}

	return false
}

// SetCreateTimestamp gets a reference to the given int64 and assigns it to the CreateTimestamp field.
func (o *Payment) SetCreateTimestamp(v int64) {
	o.CreateTimestamp = &v
}

// GetCreatedTimestamp returns the CreatedTimestamp field value if set, zero value otherwise.
func (o *Payment) GetCreatedTimestamp() int64 {
	if o == nil || IsNil(o.CreatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.CreatedTimestamp
}

// GetCreatedTimestampOk returns a tuple with the CreatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetCreatedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.CreatedTimestamp) {
		return nil, false
	}
	return o.CreatedTimestamp, true
}

// HasCreatedTimestamp returns a boolean if a field has been set.
func (o *Payment) HasCreatedTimestamp() bool {
	if o != nil && !IsNil(o.CreatedTimestamp) {
		return true
	}

	return false
}

// SetCreatedTimestamp gets a reference to the given int64 and assigns it to the CreatedTimestamp field.
func (o *Payment) SetCreatedTimestamp(v int64) {
	o.CreatedTimestamp = &v
}

// GetUpdateTimestamp returns the UpdateTimestamp field value if set, zero value otherwise.
func (o *Payment) GetUpdateTimestamp() int64 {
	if o == nil || IsNil(o.UpdateTimestamp) {
		var ret int64
		return ret
	}
	return *o.UpdateTimestamp
}

// GetUpdateTimestampOk returns a tuple with the UpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetUpdateTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdateTimestamp) {
		return nil, false
	}
	return o.UpdateTimestamp, true
}

// HasUpdateTimestamp returns a boolean if a field has been set.
func (o *Payment) HasUpdateTimestamp() bool {
	if o != nil && !IsNil(o.UpdateTimestamp) {
		return true
	}

	return false
}

// SetUpdateTimestamp gets a reference to the given int64 and assigns it to the UpdateTimestamp field.
func (o *Payment) SetUpdateTimestamp(v int64) {
	o.UpdateTimestamp = &v
}

// GetUpdatedTimestamp returns the UpdatedTimestamp field value if set, zero value otherwise.
func (o *Payment) GetUpdatedTimestamp() int64 {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		var ret int64
		return ret
	}
	return *o.UpdatedTimestamp
}

// GetUpdatedTimestampOk returns a tuple with the UpdatedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetUpdatedTimestampOk() (*int64, bool) {
	if o == nil || IsNil(o.UpdatedTimestamp) {
		return nil, false
	}
	return o.UpdatedTimestamp, true
}

// HasUpdatedTimestamp returns a boolean if a field has been set.
func (o *Payment) HasUpdatedTimestamp() bool {
	if o != nil && !IsNil(o.UpdatedTimestamp) {
		return true
	}

	return false
}

// SetUpdatedTimestamp gets a reference to the given int64 and assigns it to the UpdatedTimestamp field.
func (o *Payment) SetUpdatedTimestamp(v int64) {
	o.UpdatedTimestamp = &v
}

// GetPaymentAdjustments returns the PaymentAdjustments field value if set, zero value otherwise.
func (o *Payment) GetPaymentAdjustments() []PaymentAdjustment {
	if o == nil || IsNil(o.PaymentAdjustments) {
		var ret []PaymentAdjustment
		return ret
	}
	return o.PaymentAdjustments
}

// GetPaymentAdjustmentsOk returns a tuple with the PaymentAdjustments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Payment) GetPaymentAdjustmentsOk() ([]PaymentAdjustment, bool) {
	if o == nil || IsNil(o.PaymentAdjustments) {
		return nil, false
	}
	return o.PaymentAdjustments, true
}

// HasPaymentAdjustments returns a boolean if a field has been set.
func (o *Payment) HasPaymentAdjustments() bool {
	if o != nil && !IsNil(o.PaymentAdjustments) {
		return true
	}

	return false
}

// SetPaymentAdjustments gets a reference to the given []PaymentAdjustment and assigns it to the PaymentAdjustments field.
func (o *Payment) SetPaymentAdjustments(v []PaymentAdjustment) {
	o.PaymentAdjustments = v
}

func (o Payment) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Payment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PaymentId) {
		toSerialize["payment_id"] = o.PaymentId
	}
	if !IsNil(o.BuyerUserId) {
		toSerialize["buyer_user_id"] = o.BuyerUserId
	}
	if !IsNil(o.ShopId) {
		toSerialize["shop_id"] = o.ShopId
	}
	if !IsNil(o.ReceiptId) {
		toSerialize["receipt_id"] = o.ReceiptId
	}
	if !IsNil(o.AmountGross) {
		toSerialize["amount_gross"] = o.AmountGross
	}
	if !IsNil(o.AmountFees) {
		toSerialize["amount_fees"] = o.AmountFees
	}
	if !IsNil(o.AmountNet) {
		toSerialize["amount_net"] = o.AmountNet
	}
	if o.PostedGross.IsSet() {
		toSerialize["posted_gross"] = o.PostedGross.Get()
	}
	if o.PostedFees.IsSet() {
		toSerialize["posted_fees"] = o.PostedFees.Get()
	}
	if o.PostedNet.IsSet() {
		toSerialize["posted_net"] = o.PostedNet.Get()
	}
	if o.AdjustedGross.IsSet() {
		toSerialize["adjusted_gross"] = o.AdjustedGross.Get()
	}
	if o.AdjustedFees.IsSet() {
		toSerialize["adjusted_fees"] = o.AdjustedFees.Get()
	}
	if o.AdjustedNet.IsSet() {
		toSerialize["adjusted_net"] = o.AdjustedNet.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if o.ShopCurrency.IsSet() {
		toSerialize["shop_currency"] = o.ShopCurrency.Get()
	}
	if o.BuyerCurrency.IsSet() {
		toSerialize["buyer_currency"] = o.BuyerCurrency.Get()
	}
	if o.ShippingUserId.IsSet() {
		toSerialize["shipping_user_id"] = o.ShippingUserId.Get()
	}
	if !IsNil(o.ShippingAddressId) {
		toSerialize["shipping_address_id"] = o.ShippingAddressId
	}
	if !IsNil(o.BillingAddressId) {
		toSerialize["billing_address_id"] = o.BillingAddressId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.ShippedTimestamp.IsSet() {
		toSerialize["shipped_timestamp"] = o.ShippedTimestamp.Get()
	}
	if !IsNil(o.CreateTimestamp) {
		toSerialize["create_timestamp"] = o.CreateTimestamp
	}
	if !IsNil(o.CreatedTimestamp) {
		toSerialize["created_timestamp"] = o.CreatedTimestamp
	}
	if !IsNil(o.UpdateTimestamp) {
		toSerialize["update_timestamp"] = o.UpdateTimestamp
	}
	if !IsNil(o.UpdatedTimestamp) {
		toSerialize["updated_timestamp"] = o.UpdatedTimestamp
	}
	if !IsNil(o.PaymentAdjustments) {
		toSerialize["payment_adjustments"] = o.PaymentAdjustments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

type NullablePayment struct {
	value *Payment
	isSet bool
}

func (v NullablePayment) Get() *Payment {
	return v.value
}

func (v *NullablePayment) Set(val *Payment) {
	v.value = val
	v.isSet = true
}

func (v NullablePayment) IsSet() bool {
	return v.isSet
}

func (v *NullablePayment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayment(val *Payment) *NullablePayment {
	return &NullablePayment{value: val, isSet: true}
}

func (v NullablePayment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
