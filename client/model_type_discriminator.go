/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2024 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goEtsy

import (
	"encoding/json"
)

// checks if the TypeDiscriminator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TypeDiscriminator{}

// TypeDiscriminator struct for TypeDiscriminator
type TypeDiscriminator struct {
	// field used to determine the type of the object when deserializing union type responses
	Type                 string `json:"__type"`
	AdditionalProperties map[string]interface{}
}

type _TypeDiscriminator TypeDiscriminator

// NewTypeDiscriminator instantiates a new TypeDiscriminator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypeDiscriminator(type_ string) *TypeDiscriminator {
	this := TypeDiscriminator{}
	this.Type = type_
	return &this
}

// NewTypeDiscriminatorWithDefaults instantiates a new TypeDiscriminator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypeDiscriminatorWithDefaults() *TypeDiscriminator {
	this := TypeDiscriminator{}
	return &this
}

// GetType returns the Type field value
func (o *TypeDiscriminator) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TypeDiscriminator) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TypeDiscriminator) SetType(v string) {
	o.Type = v
}

func (o TypeDiscriminator) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TypeDiscriminator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["__type"] = o.Type

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

type NullableTypeDiscriminator struct {
	value *TypeDiscriminator
	isSet bool
}

func (v NullableTypeDiscriminator) Get() *TypeDiscriminator {
	return v.value
}

func (v *NullableTypeDiscriminator) Set(val *TypeDiscriminator) {
	v.value = val
	v.isSet = true
}

func (v NullableTypeDiscriminator) IsSet() bool {
	return v.isSet
}

func (v *NullableTypeDiscriminator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypeDiscriminator(val *TypeDiscriminator) *NullableTypeDiscriminator {
	return &NullableTypeDiscriminator{value: val, isSet: true}
}

func (v NullableTypeDiscriminator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypeDiscriminator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
