/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2024 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goEtsy

import (
	"encoding/json"
	"fmt"
)

// ShopReceiptStatus The current order status string. One of: `paid`, `completed`, `open`, `payment processing` or `canceled`.
type ShopReceiptStatus string

// List of ShopReceipt_status
const (
	SHOPRECEIPTSTATUS_PAID               ShopReceiptStatus = "paid"
	SHOPRECEIPTSTATUS_COMPLETED          ShopReceiptStatus = "completed"
	SHOPRECEIPTSTATUS_OPEN               ShopReceiptStatus = "open"
	SHOPRECEIPTSTATUS_PAYMENT_PROCESSING ShopReceiptStatus = "payment processing"
	SHOPRECEIPTSTATUS_CANCELED           ShopReceiptStatus = "canceled"
	SHOPRECEIPTSTATUS_FULLY_REFUNDED     ShopReceiptStatus = "fully refunded"
	SHOPRECEIPTSTATUS_PARTIALLY_REFUNDED ShopReceiptStatus = "partially refunded"
)

// All allowed values of ShopReceiptStatus enum
var AllowedShopReceiptStatusEnumValues = []ShopReceiptStatus{
	"paid",
	"completed",
	"open",
	"payment processing",
	"canceled",
	"fully refunded",
	"partially refunded",
}

func (v *ShopReceiptStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShopReceiptStatus(value)
	for _, existing := range AllowedShopReceiptStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShopReceiptStatus", value)
}

// NewShopReceiptStatusFromValue returns a pointer to a valid ShopReceiptStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShopReceiptStatusFromValue(v string) (*ShopReceiptStatus, error) {
	ev := ShopReceiptStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShopReceiptStatus: valid values are %v", v, AllowedShopReceiptStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShopReceiptStatus) IsValid() bool {
	for _, existing := range AllowedShopReceiptStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShopReceipt_status value
func (v ShopReceiptStatus) Ptr() *ShopReceiptStatus {
	return &v
}

type NullableShopReceiptStatus struct {
	value *ShopReceiptStatus
	isSet bool
}

func (v NullableShopReceiptStatus) Get() *ShopReceiptStatus {
	return v.value
}

func (v *NullableShopReceiptStatus) Set(val *ShopReceiptStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableShopReceiptStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableShopReceiptStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopReceiptStatus(val *ShopReceiptStatus) *NullableShopReceiptStatus {
	return &NullableShopReceiptStatus{value: val, isSet: true}
}

func (v NullableShopReceiptStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopReceiptStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
