/*
Etsy Open API v3

<div class=\"wt-text-body-01\"><p class=\"wt-pt-xs-2 wt-pb-xs-2\">Etsy's Open API provides a simple RESTful interface for various Etsy.com features. The API endpoints are meant to replace Etsy's Open API v2, which is scheduled to end service in 2022.</p><p class=\"wt-pb-xs-2\">All of the endpoints are callable and the majority of the API endpoints are now in a beta phase. This means we do not expect to make any breaking changes before our general release. A handful of endpoints are currently interface stubs (labeled “Feedback Only”) and returns a \"501 Not Implemented\" response code when called.</p><p class=\"wt-pb-xs-2\">If you'd like to report an issue or provide feedback on the API design, <a target=\"_blank\" class=\"wt-text-link wt-p-xs-0\" href=\"https://github.com/etsy/open-api/discussions\">please add an issue in Github</a>.</p></div>&copy; 2021-2024 Etsy, Inc. All Rights Reserved. Use of this code is subject to Etsy's <a class='wt-text-link wt-p-xs-0' target='_blank' href='https://www.etsy.com/legal/api'>API Developer Terms of Use</a>.

API version: 3.0.0
Contact: developers@etsy.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package goEtsy

import (
	"encoding/json"
	"fmt"
)

// ShopListingWhenMade An enumerated string for the era in which the maker made the product in this listing. Helps buyers locate the listing under the Vintage heading. Requires 'is_supply' and 'who_made'.
type ShopListingWhenMade string

// List of ShopListing_when_made
const (
	SHOPLISTINGWHENMADE_MADE_TO_ORDER ShopListingWhenMade = "made_to_order"
	SHOPLISTINGWHENMADE__2020_2024    ShopListingWhenMade = "2020_2024"
	SHOPLISTINGWHENMADE__2010_2019    ShopListingWhenMade = "2010_2019"
	SHOPLISTINGWHENMADE__2005_2009    ShopListingWhenMade = "2005_2009"
	SHOPLISTINGWHENMADE_BEFORE_2005   ShopListingWhenMade = "before_2005"
	SHOPLISTINGWHENMADE__2000_2004    ShopListingWhenMade = "2000_2004"
	SHOPLISTINGWHENMADE__1990S        ShopListingWhenMade = "1990s"
	SHOPLISTINGWHENMADE__1980S        ShopListingWhenMade = "1980s"
	SHOPLISTINGWHENMADE__1970S        ShopListingWhenMade = "1970s"
	SHOPLISTINGWHENMADE__1960S        ShopListingWhenMade = "1960s"
	SHOPLISTINGWHENMADE__1950S        ShopListingWhenMade = "1950s"
	SHOPLISTINGWHENMADE__1940S        ShopListingWhenMade = "1940s"
	SHOPLISTINGWHENMADE__1930S        ShopListingWhenMade = "1930s"
	SHOPLISTINGWHENMADE__1920S        ShopListingWhenMade = "1920s"
	SHOPLISTINGWHENMADE__1910S        ShopListingWhenMade = "1910s"
	SHOPLISTINGWHENMADE__1900S        ShopListingWhenMade = "1900s"
	SHOPLISTINGWHENMADE__1800S        ShopListingWhenMade = "1800s"
	SHOPLISTINGWHENMADE__1700S        ShopListingWhenMade = "1700s"
	SHOPLISTINGWHENMADE_BEFORE_1700   ShopListingWhenMade = "before_1700"
)

// All allowed values of ShopListingWhenMade enum
var AllowedShopListingWhenMadeEnumValues = []ShopListingWhenMade{
	"made_to_order",
	"2020_2024",
	"2010_2019",
	"2005_2009",
	"before_2005",
	"2000_2004",
	"1990s",
	"1980s",
	"1970s",
	"1960s",
	"1950s",
	"1940s",
	"1930s",
	"1920s",
	"1910s",
	"1900s",
	"1800s",
	"1700s",
	"before_1700",
}

func (v *ShopListingWhenMade) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShopListingWhenMade(value)
	for _, existing := range AllowedShopListingWhenMadeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShopListingWhenMade", value)
}

// NewShopListingWhenMadeFromValue returns a pointer to a valid ShopListingWhenMade
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShopListingWhenMadeFromValue(v string) (*ShopListingWhenMade, error) {
	ev := ShopListingWhenMade(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShopListingWhenMade: valid values are %v", v, AllowedShopListingWhenMadeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShopListingWhenMade) IsValid() bool {
	for _, existing := range AllowedShopListingWhenMadeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShopListing_when_made value
func (v ShopListingWhenMade) Ptr() *ShopListingWhenMade {
	return &v
}

type NullableShopListingWhenMade struct {
	value *ShopListingWhenMade
	isSet bool
}

func (v NullableShopListingWhenMade) Get() *ShopListingWhenMade {
	return v.value
}

func (v *NullableShopListingWhenMade) Set(val *ShopListingWhenMade) {
	v.value = val
	v.isSet = true
}

func (v NullableShopListingWhenMade) IsSet() bool {
	return v.isSet
}

func (v *NullableShopListingWhenMade) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShopListingWhenMade(val *ShopListingWhenMade) *NullableShopListingWhenMade {
	return &NullableShopListingWhenMade{value: val, isSet: true}
}

func (v NullableShopListingWhenMade) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShopListingWhenMade) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
