/*
Etsy Open API v3

Testing ShopReturnPolicyAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package goEtsy

import (
	"context"
	"testing"

	openapiclient "github.com/gearment/go-etsy/client"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_goEtsy_ShopReturnPolicyAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ShopReturnPolicyAPIService ConsolidateShopReturnPolicies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shopId int64

		resp, httpRes, err := apiClient.ShopReturnPolicyAPI.ConsolidateShopReturnPolicies(context.Background(), shopId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopReturnPolicyAPIService CreateShopReturnPolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shopId int64

		resp, httpRes, err := apiClient.ShopReturnPolicyAPI.CreateShopReturnPolicy(context.Background(), shopId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopReturnPolicyAPIService DeleteShopReturnPolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shopId int64
		var returnPolicyId int64

		httpRes, err := apiClient.ShopReturnPolicyAPI.DeleteShopReturnPolicy(context.Background(), shopId, returnPolicyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopReturnPolicyAPIService GetShopReturnPolicies", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shopId int64

		resp, httpRes, err := apiClient.ShopReturnPolicyAPI.GetShopReturnPolicies(context.Background(), shopId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopReturnPolicyAPIService GetShopReturnPolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shopId int64
		var returnPolicyId int64

		resp, httpRes, err := apiClient.ShopReturnPolicyAPI.GetShopReturnPolicy(context.Background(), shopId, returnPolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ShopReturnPolicyAPIService UpdateShopReturnPolicy", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var shopId int64
		var returnPolicyId int64

		resp, httpRes, err := apiClient.ShopReturnPolicyAPI.UpdateShopReturnPolicy(context.Background(), shopId, returnPolicyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
